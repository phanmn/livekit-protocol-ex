# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.JoinResponse do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          fast_publish: boolean(),
          enabled_publish_codecs: [LivekitProtocolEx.Codec.t()],
          sif_trailer: binary(),
          server_info: LivekitProtocolEx.ServerInfo.t() | nil,
          ping_interval: integer(),
          ping_timeout: integer(),
          server_region: String.t(),
          client_configuration: LivekitProtocolEx.ClientConfiguration.t() | nil,
          alternative_url: String.t(),
          subscriber_primary: boolean(),
          ice_servers: [LivekitProtocolEx.ICEServer.t()],
          server_version: String.t(),
          other_participants: [LivekitProtocolEx.ParticipantInfo.t()],
          participant: LivekitProtocolEx.ParticipantInfo.t() | nil,
          room: LivekitProtocolEx.Room.t() | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct fast_publish: false,
            enabled_publish_codecs: [],
            sif_trailer: "",
            server_info: nil,
            ping_interval: 0,
            ping_timeout: 0,
            server_region: "",
            client_configuration: nil,
            alternative_url: "",
            subscriber_primary: false,
            ice_servers: [],
            server_version: "",
            other_participants: [],
            participant: nil,
            room: nil,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_fast_publish(msg)
        |> encode_enabled_publish_codecs(msg)
        |> encode_sif_trailer(msg)
        |> encode_server_info(msg)
        |> encode_ping_interval(msg)
        |> encode_ping_timeout(msg)
        |> encode_server_region(msg)
        |> encode_client_configuration(msg)
        |> encode_alternative_url(msg)
        |> encode_subscriber_primary(msg)
        |> encode_ice_servers(msg)
        |> encode_server_version(msg)
        |> encode_other_participants(msg)
        |> encode_participant(msg)
        |> encode_room(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_fast_publish({acc, acc_size}, msg) do
      if msg.fast_publish == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.fast_publish)
        {["x", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:fast_publish, "invalid field value"), __STACKTRACE__
    end

    defp encode_enabled_publish_codecs({acc, acc_size}, msg) do
      case msg.enabled_publish_codecs do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "r" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:enabled_publish_codecs, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_sif_trailer({acc, acc_size}, msg) do
      if msg.sif_trailer == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bytes(msg.sif_trailer)
        {["j", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:sif_trailer, "invalid field value"), __STACKTRACE__
    end

    defp encode_server_info({acc, acc_size}, msg) do
      if msg.server_info == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.server_info)
        {["b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:server_info, "invalid field value"), __STACKTRACE__
    end

    defp encode_ping_interval({acc, acc_size}, msg) do
      if msg.ping_interval == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.ping_interval)
        {["X", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ping_interval, "invalid field value"), __STACKTRACE__
    end

    defp encode_ping_timeout({acc, acc_size}, msg) do
      if msg.ping_timeout == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.ping_timeout)
        {["P", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ping_timeout, "invalid field value"), __STACKTRACE__
    end

    defp encode_server_region({acc, acc_size}, msg) do
      if msg.server_region == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.server_region)
        {["J", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:server_region, "invalid field value"), __STACKTRACE__
    end

    defp encode_client_configuration({acc, acc_size}, msg) do
      if msg.client_configuration == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.client_configuration)
        {["B", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:client_configuration, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_alternative_url({acc, acc_size}, msg) do
      if msg.alternative_url == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.alternative_url)
        {[":", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:alternative_url, "invalid field value"), __STACKTRACE__
    end

    defp encode_subscriber_primary({acc, acc_size}, msg) do
      if msg.subscriber_primary == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.subscriber_primary)
        {["0", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:subscriber_primary, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_ice_servers({acc, acc_size}, msg) do
      case msg.ice_servers do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "*" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ice_servers, "invalid field value"), __STACKTRACE__
    end

    defp encode_server_version({acc, acc_size}, msg) do
      if msg.server_version == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.server_version)
        {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:server_version, "invalid field value"), __STACKTRACE__
    end

    defp encode_other_participants({acc, acc_size}, msg) do
      case msg.other_participants do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\x1A" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:other_participants, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_participant({acc, acc_size}, msg) do
      if msg.participant == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.participant)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:participant, "invalid field value"), __STACKTRACE__
    end

    defp encode_room({acc, acc_size}, msg) do
      if msg.room == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.room)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:room, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.JoinResponse))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[fast_publish: value], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 enabled_publish_codecs:
                   msg.enabled_publish_codecs ++ [LivekitProtocolEx.Codec.decode!(delimited)]
               ], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[sif_trailer: delimited], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 server_info:
                   Protox.MergeMessage.merge(
                     msg.server_info,
                     LivekitProtocolEx.ServerInfo.decode!(delimited)
                   )
               ], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[ping_interval: value], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[ping_timeout: value], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[server_region: Protox.Decode.validate_string!(delimited)], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 client_configuration:
                   Protox.MergeMessage.merge(
                     msg.client_configuration,
                     LivekitProtocolEx.ClientConfiguration.decode!(delimited)
                   )
               ], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[alternative_url: Protox.Decode.validate_string!(delimited)], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[subscriber_primary: value], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[ice_servers: msg.ice_servers ++ [LivekitProtocolEx.ICEServer.decode!(delimited)]],
               rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[server_version: Protox.Decode.validate_string!(delimited)], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 other_participants:
                   msg.other_participants ++
                     [LivekitProtocolEx.ParticipantInfo.decode!(delimited)]
               ], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 participant:
                   Protox.MergeMessage.merge(
                     msg.participant,
                     LivekitProtocolEx.ParticipantInfo.decode!(delimited)
                   )
               ], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 room:
                   Protox.MergeMessage.merge(msg.room, LivekitProtocolEx.Room.decode!(delimited))
               ], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:fast_publish) do
      {:ok, false}
    end

    def default(:enabled_publish_codecs) do
      {:error, :no_default_value}
    end

    def default(:sif_trailer) do
      {:ok, ""}
    end

    def default(:server_info) do
      {:ok, nil}
    end

    def default(:ping_interval) do
      {:ok, 0}
    end

    def default(:ping_timeout) do
      {:ok, 0}
    end

    def default(:server_region) do
      {:ok, ""}
    end

    def default(:client_configuration) do
      {:ok, nil}
    end

    def default(:alternative_url) do
      {:ok, ""}
    end

    def default(:subscriber_primary) do
      {:ok, false}
    end

    def default(:ice_servers) do
      {:error, :no_default_value}
    end

    def default(:server_version) do
      {:ok, ""}
    end

    def default(:other_participants) do
      {:error, :no_default_value}
    end

    def default(:participant) do
      {:ok, nil}
    end

    def default(:room) do
      {:ok, nil}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        alternative_url: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :alternative_url,
          tag: 7,
          type: :string
        },
        client_configuration: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :client_configuration,
          tag: 8,
          type: {:message, LivekitProtocolEx.ClientConfiguration}
        },
        enabled_publish_codecs: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :enabled_publish_codecs,
          tag: 14,
          type: {:message, LivekitProtocolEx.Codec}
        },
        fast_publish: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :fast_publish,
          tag: 15,
          type: :bool
        },
        ice_servers: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :ice_servers,
          tag: 5,
          type: {:message, LivekitProtocolEx.ICEServer}
        },
        other_participants: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :other_participants,
          tag: 3,
          type: {:message, LivekitProtocolEx.ParticipantInfo}
        },
        participant: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :participant,
          tag: 2,
          type: {:message, LivekitProtocolEx.ParticipantInfo}
        },
        ping_interval: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :ping_interval,
          tag: 11,
          type: :int32
        },
        ping_timeout: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :ping_timeout,
          tag: 10,
          type: :int32
        },
        room: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :room,
          tag: 1,
          type: {:message, LivekitProtocolEx.Room}
        },
        server_info: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :server_info,
          tag: 12,
          type: {:message, LivekitProtocolEx.ServerInfo}
        },
        server_region: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :server_region,
          tag: 9,
          type: :string
        },
        server_version: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :server_version,
          tag: 4,
          type: :string
        },
        sif_trailer: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :sif_trailer,
          tag: 13,
          type: :bytes
        },
        subscriber_primary: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :subscriber_primary,
          tag: 6,
          type: :bool
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.JoinResponse,
      syntax: :proto3
    }
  end
end
