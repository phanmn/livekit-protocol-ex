# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.CreateSIPParticipantRequest do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          trunk: LivekitProtocolEx.SIPOutboundConfig.t() | nil,
          wait_until_answered: boolean(),
          media_encryption: atom(),
          include_headers: atom(),
          headers: %{String.t() => String.t()},
          sip_number: String.t(),
          krisp_enabled: boolean(),
          play_dialtone: boolean(),
          max_call_duration: Google.Protobuf.Duration.t() | nil,
          ringing_timeout: Google.Protobuf.Duration.t() | nil,
          hide_phone_number: boolean(),
          participant_attributes: %{String.t() => String.t()},
          participant_metadata: String.t(),
          participant_name: String.t(),
          play_ringtone: boolean(),
          dtmf: String.t(),
          participant_identity: String.t(),
          room_name: String.t(),
          sip_call_to: String.t(),
          sip_trunk_id: String.t(),
          display_name: String.t() | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct display_name: nil,
            trunk: nil,
            wait_until_answered: false,
            media_encryption: :SIP_MEDIA_ENCRYPT_DISABLE,
            include_headers: :SIP_NO_HEADERS,
            headers: %{},
            sip_number: "",
            krisp_enabled: false,
            play_dialtone: false,
            max_call_duration: nil,
            ringing_timeout: nil,
            hide_phone_number: false,
            participant_attributes: %{},
            participant_metadata: "",
            participant_name: "",
            play_ringtone: false,
            dtmf: "",
            participant_identity: "",
            room_name: "",
            sip_call_to: "",
            sip_trunk_id: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_display_name(msg)
        |> encode_trunk(msg)
        |> encode_wait_until_answered(msg)
        |> encode_media_encryption(msg)
        |> encode_include_headers(msg)
        |> encode_headers(msg)
        |> encode_sip_number(msg)
        |> encode_krisp_enabled(msg)
        |> encode_play_dialtone(msg)
        |> encode_max_call_duration(msg)
        |> encode_ringing_timeout(msg)
        |> encode_hide_phone_number(msg)
        |> encode_participant_attributes(msg)
        |> encode_participant_metadata(msg)
        |> encode_participant_name(msg)
        |> encode_play_ringtone(msg)
        |> encode_dtmf(msg)
        |> encode_participant_identity(msg)
        |> encode_room_name(msg)
        |> encode_sip_call_to(msg)
        |> encode_sip_trunk_id(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_display_name({acc, acc_size}, msg) do
      case msg.display_name do
        nil ->
          {acc, acc_size}

        child_field_value ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_string(child_field_value)
          {["\xAA\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:display_name, "invalid field value"), __STACKTRACE__
    end

    defp encode_trunk({acc, acc_size}, msg) do
      if msg.trunk == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.trunk)
        {["\xA2\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:trunk, "invalid field value"), __STACKTRACE__
    end

    defp encode_wait_until_answered({acc, acc_size}, msg) do
      if msg.wait_until_answered == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.wait_until_answered)
        {["\x98\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:wait_until_answered, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_media_encryption({acc, acc_size}, msg) do
      if msg.media_encryption == :SIP_MEDIA_ENCRYPT_DISABLE do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.media_encryption
          |> LivekitProtocolEx.SIPMediaEncryption.encode()
          |> Protox.Encode.encode_enum()

        {["\x90\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:media_encryption, "invalid field value"), __STACKTRACE__
    end

    defp encode_include_headers({acc, acc_size}, msg) do
      if msg.include_headers == :SIP_NO_HEADERS do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.include_headers
          |> LivekitProtocolEx.SIPHeaderOptions.encode()
          |> Protox.Encode.encode_enum()

        {["\x88\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:include_headers, "invalid field value"), __STACKTRACE__
    end

    defp encode_headers({acc, acc_size}, msg) do
      map = Map.fetch!(msg, :headers)

      if map_size(map) == 0 do
        {acc, acc_size}
      else
        Enum.reduce(map, {acc, acc_size}, fn {k, v}, {acc, acc_size} ->
          {k_value_bytes, k_value_len} = Protox.Encode.encode_string(k)
          {v_value_bytes, v_value_len} = Protox.Encode.encode_string(v)
          len = 2 + k_value_len + v_value_len
          {len_varint, len_varint_size} = Protox.Varint.encode(len)

          acc = [
            <<"\x82\x01", len_varint::binary, "\n">>,
            k_value_bytes,
            "\x12",
            v_value_bytes | acc
          ]

          {acc, acc_size + 4 + k_value_len + v_value_len + len_varint_size}
        end)
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:headers, "invalid field value"), __STACKTRACE__
    end

    defp encode_sip_number({acc, acc_size}, msg) do
      if msg.sip_number == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.sip_number)
        {["z", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:sip_number, "invalid field value"), __STACKTRACE__
    end

    defp encode_krisp_enabled({acc, acc_size}, msg) do
      if msg.krisp_enabled == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.krisp_enabled)
        {["p", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:krisp_enabled, "invalid field value"), __STACKTRACE__
    end

    defp encode_play_dialtone({acc, acc_size}, msg) do
      if msg.play_dialtone == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.play_dialtone)
        {["h", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:play_dialtone, "invalid field value"), __STACKTRACE__
    end

    defp encode_max_call_duration({acc, acc_size}, msg) do
      if msg.max_call_duration == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.max_call_duration)
        {["b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:max_call_duration, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_ringing_timeout({acc, acc_size}, msg) do
      if msg.ringing_timeout == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.ringing_timeout)
        {["Z", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ringing_timeout, "invalid field value"), __STACKTRACE__
    end

    defp encode_hide_phone_number({acc, acc_size}, msg) do
      if msg.hide_phone_number == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.hide_phone_number)
        {["P", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:hide_phone_number, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_participant_attributes({acc, acc_size}, msg) do
      map = Map.fetch!(msg, :participant_attributes)

      if map_size(map) == 0 do
        {acc, acc_size}
      else
        Enum.reduce(map, {acc, acc_size}, fn {k, v}, {acc, acc_size} ->
          {k_value_bytes, k_value_len} = Protox.Encode.encode_string(k)
          {v_value_bytes, v_value_len} = Protox.Encode.encode_string(v)
          len = 2 + k_value_len + v_value_len
          {len_varint, len_varint_size} = Protox.Varint.encode(len)
          acc = [<<"J", len_varint::binary, "\n">>, k_value_bytes, "\x12", v_value_bytes | acc]
          {acc, acc_size + 3 + k_value_len + v_value_len + len_varint_size}
        end)
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:participant_attributes, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_participant_metadata({acc, acc_size}, msg) do
      if msg.participant_metadata == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.participant_metadata)
        {["B", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:participant_metadata, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_participant_name({acc, acc_size}, msg) do
      if msg.participant_name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.participant_name)
        {[":", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:participant_name, "invalid field value"), __STACKTRACE__
    end

    defp encode_play_ringtone({acc, acc_size}, msg) do
      if msg.play_ringtone == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.play_ringtone)
        {["0", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:play_ringtone, "invalid field value"), __STACKTRACE__
    end

    defp encode_dtmf({acc, acc_size}, msg) do
      if msg.dtmf == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.dtmf)
        {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:dtmf, "invalid field value"), __STACKTRACE__
    end

    defp encode_participant_identity({acc, acc_size}, msg) do
      if msg.participant_identity == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.participant_identity)
        {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:participant_identity, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_room_name({acc, acc_size}, msg) do
      if msg.room_name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.room_name)
        {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:room_name, "invalid field value"), __STACKTRACE__
    end

    defp encode_sip_call_to({acc, acc_size}, msg) do
      if msg.sip_call_to == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.sip_call_to)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:sip_call_to, "invalid field value"), __STACKTRACE__
    end

    defp encode_sip_trunk_id({acc, acc_size}, msg) do
      if msg.sip_trunk_id == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.sip_trunk_id)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:sip_trunk_id, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.CreateSIPParticipantRequest))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<21::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[display_name: Protox.Decode.validate_string!(delimited)], rest}

            <<20::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 trunk:
                   Protox.MergeMessage.merge(
                     msg.trunk,
                     LivekitProtocolEx.SIPOutboundConfig.decode!(delimited)
                   )
               ], rest}

            <<19::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[wait_until_answered: value], rest}

            <<18::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} =
                Protox.Decode.parse_enum(bytes, LivekitProtocolEx.SIPMediaEncryption)

              {[media_encryption: value], rest}

            <<17::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.SIPHeaderOptions)
              {[include_headers: value], rest}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 (
                   {entry_key, entry_value} =
                     (
                       {map_key, map_value} = parse_string_string({:unset, :unset}, delimited)

                       map_key =
                         case map_key do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_key
                         end

                       map_value =
                         case map_value do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_value
                         end

                       {map_key, map_value}
                     )

                   {:headers, Map.put(msg.headers, entry_key, entry_value)}
                 )
               ], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[sip_number: Protox.Decode.validate_string!(delimited)], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[krisp_enabled: value], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[play_dialtone: value], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 max_call_duration:
                   Protox.MergeMessage.merge(
                     msg.max_call_duration,
                     Google.Protobuf.Duration.decode!(delimited)
                   )
               ], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 ringing_timeout:
                   Protox.MergeMessage.merge(
                     msg.ringing_timeout,
                     Google.Protobuf.Duration.decode!(delimited)
                   )
               ], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[hide_phone_number: value], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 (
                   {entry_key, entry_value} =
                     (
                       {map_key, map_value} = parse_string_string({:unset, :unset}, delimited)

                       map_key =
                         case map_key do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_key
                         end

                       map_value =
                         case map_value do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_value
                         end

                       {map_key, map_value}
                     )

                   {:participant_attributes,
                    Map.put(msg.participant_attributes, entry_key, entry_value)}
                 )
               ], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[participant_metadata: Protox.Decode.validate_string!(delimited)], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[participant_name: Protox.Decode.validate_string!(delimited)], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[play_ringtone: value], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[dtmf: Protox.Decode.validate_string!(delimited)], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[participant_identity: Protox.Decode.validate_string!(delimited)], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[room_name: Protox.Decode.validate_string!(delimited)], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[sip_call_to: Protox.Decode.validate_string!(delimited)], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[sip_trunk_id: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )

    (
      defp parse_string_string(map_entry, <<>>) do
        map_entry
      end

      defp parse_string_string({entry_key, entry_value}, bytes) do
        {map_entry, rest} =
          case Protox.Decode.parse_key(bytes) do
            {1, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{res, entry_value}, rest}

            {2, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{entry_key, res}, rest}

            {tag, wire_type, rest} ->
              {_, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {{entry_key, entry_value}, rest}
          end

        parse_string_string(map_entry, rest)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:display_name) do
      {:error, :no_default_value}
    end

    def default(:trunk) do
      {:ok, nil}
    end

    def default(:wait_until_answered) do
      {:ok, false}
    end

    def default(:media_encryption) do
      {:ok, :SIP_MEDIA_ENCRYPT_DISABLE}
    end

    def default(:include_headers) do
      {:ok, :SIP_NO_HEADERS}
    end

    def default(:headers) do
      {:error, :no_default_value}
    end

    def default(:sip_number) do
      {:ok, ""}
    end

    def default(:krisp_enabled) do
      {:ok, false}
    end

    def default(:play_dialtone) do
      {:ok, false}
    end

    def default(:max_call_duration) do
      {:ok, nil}
    end

    def default(:ringing_timeout) do
      {:ok, nil}
    end

    def default(:hide_phone_number) do
      {:ok, false}
    end

    def default(:participant_attributes) do
      {:error, :no_default_value}
    end

    def default(:participant_metadata) do
      {:ok, ""}
    end

    def default(:participant_name) do
      {:ok, ""}
    end

    def default(:play_ringtone) do
      {:ok, false}
    end

    def default(:dtmf) do
      {:ok, ""}
    end

    def default(:participant_identity) do
      {:ok, ""}
    end

    def default(:room_name) do
      {:ok, ""}
    end

    def default(:sip_call_to) do
      {:ok, ""}
    end

    def default(:sip_trunk_id) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        display_name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :_display_name},
          label: :proto3_optional,
          name: :display_name,
          tag: 21,
          type: :string
        },
        dtmf: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :dtmf,
          tag: 5,
          type: :string
        },
        headers: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :map,
          label: nil,
          name: :headers,
          tag: 16,
          type: {:string, :string}
        },
        hide_phone_number: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :hide_phone_number,
          tag: 10,
          type: :bool
        },
        include_headers: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :SIP_NO_HEADERS},
          label: :optional,
          name: :include_headers,
          tag: 17,
          type: {:enum, LivekitProtocolEx.SIPHeaderOptions}
        },
        krisp_enabled: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :krisp_enabled,
          tag: 14,
          type: :bool
        },
        max_call_duration: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :max_call_duration,
          tag: 12,
          type: {:message, Google.Protobuf.Duration}
        },
        media_encryption: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :SIP_MEDIA_ENCRYPT_DISABLE},
          label: :optional,
          name: :media_encryption,
          tag: 18,
          type: {:enum, LivekitProtocolEx.SIPMediaEncryption}
        },
        participant_attributes: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :map,
          label: nil,
          name: :participant_attributes,
          tag: 9,
          type: {:string, :string}
        },
        participant_identity: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :participant_identity,
          tag: 4,
          type: :string
        },
        participant_metadata: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :participant_metadata,
          tag: 8,
          type: :string
        },
        participant_name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :participant_name,
          tag: 7,
          type: :string
        },
        play_dialtone: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :play_dialtone,
          tag: 13,
          type: :bool
        },
        play_ringtone: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :play_ringtone,
          tag: 6,
          type: :bool
        },
        ringing_timeout: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :ringing_timeout,
          tag: 11,
          type: {:message, Google.Protobuf.Duration}
        },
        room_name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :room_name,
          tag: 3,
          type: :string
        },
        sip_call_to: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :sip_call_to,
          tag: 2,
          type: :string
        },
        sip_number: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :sip_number,
          tag: 15,
          type: :string
        },
        sip_trunk_id: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :sip_trunk_id,
          tag: 1,
          type: :string
        },
        trunk: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :trunk,
          tag: 20,
          type: {:message, LivekitProtocolEx.SIPOutboundConfig}
        },
        wait_until_answered: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :wait_until_answered,
          tag: 19,
          type: :bool
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.CreateSIPParticipantRequest,
      syntax: :proto3
    }
  end
end
