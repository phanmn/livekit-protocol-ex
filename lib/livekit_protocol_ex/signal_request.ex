# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.SignalRequest do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          message:
            {:offer, LivekitProtocolEx.SessionDescription.t()}
            | {:answer, LivekitProtocolEx.SessionDescription.t()}
            | {:trickle, LivekitProtocolEx.TrickleRequest.t()}
            | {:add_track, LivekitProtocolEx.AddTrackRequest.t()}
            | {:mute, LivekitProtocolEx.MuteTrackRequest.t()}
            | {:subscription, LivekitProtocolEx.UpdateSubscription.t()}
            | {:track_setting, LivekitProtocolEx.UpdateTrackSettings.t()}
            | {:leave, LivekitProtocolEx.LeaveRequest.t()}
            | {:update_layers, LivekitProtocolEx.UpdateVideoLayers.t()}
            | {:subscription_permission, LivekitProtocolEx.SubscriptionPermission.t()}
            | {:sync_state, LivekitProtocolEx.SyncState.t()}
            | {:simulate, LivekitProtocolEx.SimulateScenario.t()}
            | {:ping, integer()}
            | {:update_metadata, LivekitProtocolEx.UpdateParticipantMetadata.t()}
            | {:ping_req, LivekitProtocolEx.Ping.t()}
            | {:update_audio_track, LivekitProtocolEx.UpdateLocalAudioTrack.t()}
            | {:update_video_track, LivekitProtocolEx.UpdateLocalVideoTrack.t()}
            | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct message: nil, __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0} |> encode_message(msg) |> encode_unknown_fields(msg)
      end
    )

    defp encode_message({acc, acc_size}, msg) do
      case msg.message do
        nil ->
          {acc, acc_size}

        {:update_video_track, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x92\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:update_audio_track, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x8A\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:ping_req, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x82\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:update_metadata, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["z", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:ping, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(child_field_value)
          {["p", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:simulate, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["j", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:sync_state, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["b", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:subscription_permission, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["Z", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:update_layers, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["R", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:leave, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["B", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:track_setting, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {[":", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:subscription, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:mute, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:add_track, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:trickle, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:answer, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:offer, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.SignalRequest))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<18::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:update_video_track, previous_value} ->
                     {:message,
                      {:update_video_track,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.UpdateLocalVideoTrack.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:update_video_track,
                       LivekitProtocolEx.UpdateLocalVideoTrack.decode!(delimited)}}
                 end
               ], rest}

            <<17::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:update_audio_track, previous_value} ->
                     {:message,
                      {:update_audio_track,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.UpdateLocalAudioTrack.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:update_audio_track,
                       LivekitProtocolEx.UpdateLocalAudioTrack.decode!(delimited)}}
                 end
               ], rest}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:ping_req, previous_value} ->
                     {:message,
                      {:ping_req,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.Ping.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:ping_req, LivekitProtocolEx.Ping.decode!(delimited)}}
                 end
               ], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:update_metadata, previous_value} ->
                     {:message,
                      {:update_metadata,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.UpdateParticipantMetadata.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:update_metadata,
                       LivekitProtocolEx.UpdateParticipantMetadata.decode!(delimited)}}
                 end
               ], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[message: {:ping, value}], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:simulate, previous_value} ->
                     {:message,
                      {:simulate,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SimulateScenario.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:simulate, LivekitProtocolEx.SimulateScenario.decode!(delimited)}}
                 end
               ], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:sync_state, previous_value} ->
                     {:message,
                      {:sync_state,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SyncState.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:sync_state, LivekitProtocolEx.SyncState.decode!(delimited)}}
                 end
               ], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:subscription_permission, previous_value} ->
                     {:message,
                      {:subscription_permission,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SubscriptionPermission.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:subscription_permission,
                       LivekitProtocolEx.SubscriptionPermission.decode!(delimited)}}
                 end
               ], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:update_layers, previous_value} ->
                     {:message,
                      {:update_layers,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.UpdateVideoLayers.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:update_layers, LivekitProtocolEx.UpdateVideoLayers.decode!(delimited)}}
                 end
               ], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:leave, previous_value} ->
                     {:message,
                      {:leave,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.LeaveRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:leave, LivekitProtocolEx.LeaveRequest.decode!(delimited)}}
                 end
               ], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:track_setting, previous_value} ->
                     {:message,
                      {:track_setting,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.UpdateTrackSettings.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:track_setting, LivekitProtocolEx.UpdateTrackSettings.decode!(delimited)}}
                 end
               ], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:subscription, previous_value} ->
                     {:message,
                      {:subscription,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.UpdateSubscription.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:subscription, LivekitProtocolEx.UpdateSubscription.decode!(delimited)}}
                 end
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:mute, previous_value} ->
                     {:message,
                      {:mute,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.MuteTrackRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:mute, LivekitProtocolEx.MuteTrackRequest.decode!(delimited)}}
                 end
               ], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:add_track, previous_value} ->
                     {:message,
                      {:add_track,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.AddTrackRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:add_track, LivekitProtocolEx.AddTrackRequest.decode!(delimited)}}
                 end
               ], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:trickle, previous_value} ->
                     {:message,
                      {:trickle,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.TrickleRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:trickle, LivekitProtocolEx.TrickleRequest.decode!(delimited)}}
                 end
               ], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:answer, previous_value} ->
                     {:message,
                      {:answer,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SessionDescription.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:answer, LivekitProtocolEx.SessionDescription.decode!(delimited)}}
                 end
               ], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:offer, previous_value} ->
                     {:message,
                      {:offer,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SessionDescription.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:offer, LivekitProtocolEx.SessionDescription.decode!(delimited)}}
                 end
               ], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:update_video_track) do
      {:error, :no_default_value}
    end

    def default(:update_audio_track) do
      {:error, :no_default_value}
    end

    def default(:ping_req) do
      {:error, :no_default_value}
    end

    def default(:update_metadata) do
      {:error, :no_default_value}
    end

    def default(:ping) do
      {:error, :no_default_value}
    end

    def default(:simulate) do
      {:error, :no_default_value}
    end

    def default(:sync_state) do
      {:error, :no_default_value}
    end

    def default(:subscription_permission) do
      {:error, :no_default_value}
    end

    def default(:update_layers) do
      {:error, :no_default_value}
    end

    def default(:leave) do
      {:error, :no_default_value}
    end

    def default(:track_setting) do
      {:error, :no_default_value}
    end

    def default(:subscription) do
      {:error, :no_default_value}
    end

    def default(:mute) do
      {:error, :no_default_value}
    end

    def default(:add_track) do
      {:error, :no_default_value}
    end

    def default(:trickle) do
      {:error, :no_default_value}
    end

    def default(:answer) do
      {:error, :no_default_value}
    end

    def default(:offer) do
      {:error, :no_default_value}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        add_track: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :add_track,
          tag: 4,
          type: {:message, LivekitProtocolEx.AddTrackRequest}
        },
        answer: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :answer,
          tag: 2,
          type: {:message, LivekitProtocolEx.SessionDescription}
        },
        leave: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :leave,
          tag: 8,
          type: {:message, LivekitProtocolEx.LeaveRequest}
        },
        mute: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :mute,
          tag: 5,
          type: {:message, LivekitProtocolEx.MuteTrackRequest}
        },
        offer: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :offer,
          tag: 1,
          type: {:message, LivekitProtocolEx.SessionDescription}
        },
        ping: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :ping,
          tag: 14,
          type: :int64
        },
        ping_req: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :ping_req,
          tag: 16,
          type: {:message, LivekitProtocolEx.Ping}
        },
        simulate: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :simulate,
          tag: 13,
          type: {:message, LivekitProtocolEx.SimulateScenario}
        },
        subscription: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :subscription,
          tag: 6,
          type: {:message, LivekitProtocolEx.UpdateSubscription}
        },
        subscription_permission: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :subscription_permission,
          tag: 11,
          type: {:message, LivekitProtocolEx.SubscriptionPermission}
        },
        sync_state: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :sync_state,
          tag: 12,
          type: {:message, LivekitProtocolEx.SyncState}
        },
        track_setting: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :track_setting,
          tag: 7,
          type: {:message, LivekitProtocolEx.UpdateTrackSettings}
        },
        trickle: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :trickle,
          tag: 3,
          type: {:message, LivekitProtocolEx.TrickleRequest}
        },
        update_audio_track: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :update_audio_track,
          tag: 17,
          type: {:message, LivekitProtocolEx.UpdateLocalAudioTrack}
        },
        update_layers: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :update_layers,
          tag: 10,
          type: {:message, LivekitProtocolEx.UpdateVideoLayers}
        },
        update_metadata: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :update_metadata,
          tag: 15,
          type: {:message, LivekitProtocolEx.UpdateParticipantMetadata}
        },
        update_video_track: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :update_video_track,
          tag: 18,
          type: {:message, LivekitProtocolEx.UpdateLocalVideoTrack}
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.SignalRequest,
      syntax: :proto3
    }
  end
end
