# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.TrackInfo do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          backup_codec_policy: atom(),
          audio_features: [atom()],
          version: LivekitProtocolEx.TimedVersion.t() | nil,
          stream: String.t(),
          encryption: atom(),
          disable_red: boolean(),
          stereo: boolean(),
          codecs: [LivekitProtocolEx.SimulcastCodecInfo.t()],
          mid: String.t(),
          mime_type: String.t(),
          layers: [LivekitProtocolEx.VideoLayer.t()],
          source: atom(),
          disable_dtx: boolean(),
          simulcast: boolean(),
          height: non_neg_integer(),
          width: non_neg_integer(),
          muted: boolean(),
          name: String.t(),
          type: atom(),
          sid: String.t(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct backup_codec_policy: :PREFER_REGRESSION,
            audio_features: [],
            version: nil,
            stream: "",
            encryption: :NONE,
            disable_red: false,
            stereo: false,
            codecs: [],
            mid: "",
            mime_type: "",
            layers: [],
            source: :UNKNOWN,
            disable_dtx: false,
            simulcast: false,
            height: 0,
            width: 0,
            muted: false,
            name: "",
            type: :AUDIO,
            sid: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_backup_codec_policy(msg)
        |> encode_audio_features(msg)
        |> encode_version(msg)
        |> encode_stream(msg)
        |> encode_encryption(msg)
        |> encode_disable_red(msg)
        |> encode_stereo(msg)
        |> encode_codecs(msg)
        |> encode_mid(msg)
        |> encode_mime_type(msg)
        |> encode_layers(msg)
        |> encode_source(msg)
        |> encode_disable_dtx(msg)
        |> encode_simulcast(msg)
        |> encode_height(msg)
        |> encode_width(msg)
        |> encode_muted(msg)
        |> encode_name(msg)
        |> encode_type(msg)
        |> encode_sid(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_backup_codec_policy({acc, acc_size}, msg) do
      if msg.backup_codec_policy == :PREFER_REGRESSION do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.backup_codec_policy
          |> LivekitProtocolEx.BackupCodecPolicy.encode()
          |> Protox.Encode.encode_enum()

        {["\xA0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:backup_codec_policy, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_audio_features({acc, acc_size}, msg) do
      case msg.audio_features do
        [] ->
          {acc, acc_size}

        values ->
          {packed_bytes, packed_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} =
                    value
                    |> LivekitProtocolEx.AudioTrackFeature.encode()
                    |> Protox.Encode.encode_enum()

                  {[value_bytes | local_acc], local_acc_size + value_bytes_size}
                end)

              {value_size_bytes, value_size_size} = Protox.Varint.encode(value_size)
              {[value_size_bytes, Enum.reverse(value_bytes)], value_size + value_size_size}
            )

          {["\x9A\x01", packed_bytes | acc], acc_size + 2 + packed_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:audio_features, "invalid field value"), __STACKTRACE__
    end

    defp encode_version({acc, acc_size}, msg) do
      if msg.version == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.version)
        {["\x92\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:version, "invalid field value"), __STACKTRACE__
    end

    defp encode_stream({acc, acc_size}, msg) do
      if msg.stream == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.stream)
        {["\x8A\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:stream, "invalid field value"), __STACKTRACE__
    end

    defp encode_encryption({acc, acc_size}, msg) do
      if msg.encryption == :NONE do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.encryption
          |> LivekitProtocolEx.Encryption.Type.encode()
          |> Protox.Encode.encode_enum()

        {["\x80\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:encryption, "invalid field value"), __STACKTRACE__
    end

    defp encode_disable_red({acc, acc_size}, msg) do
      if msg.disable_red == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.disable_red)
        {["x", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:disable_red, "invalid field value"), __STACKTRACE__
    end

    defp encode_stereo({acc, acc_size}, msg) do
      if msg.stereo == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.stereo)
        {["p", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:stereo, "invalid field value"), __STACKTRACE__
    end

    defp encode_codecs({acc, acc_size}, msg) do
      case msg.codecs do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "j" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:codecs, "invalid field value"), __STACKTRACE__
    end

    defp encode_mid({acc, acc_size}, msg) do
      if msg.mid == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.mid)
        {["b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:mid, "invalid field value"), __STACKTRACE__
    end

    defp encode_mime_type({acc, acc_size}, msg) do
      if msg.mime_type == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.mime_type)
        {["Z", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:mime_type, "invalid field value"), __STACKTRACE__
    end

    defp encode_layers({acc, acc_size}, msg) do
      case msg.layers do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "R" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:layers, "invalid field value"), __STACKTRACE__
    end

    defp encode_source({acc, acc_size}, msg) do
      if msg.source == :UNKNOWN do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.source |> LivekitProtocolEx.TrackSource.encode() |> Protox.Encode.encode_enum()

        {["H", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:source, "invalid field value"), __STACKTRACE__
    end

    defp encode_disable_dtx({acc, acc_size}, msg) do
      if msg.disable_dtx == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.disable_dtx)
        {["@", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:disable_dtx, "invalid field value"), __STACKTRACE__
    end

    defp encode_simulcast({acc, acc_size}, msg) do
      if msg.simulcast == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.simulcast)
        {["8", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:simulcast, "invalid field value"), __STACKTRACE__
    end

    defp encode_height({acc, acc_size}, msg) do
      if msg.height == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.height)
        {["0", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:height, "invalid field value"), __STACKTRACE__
    end

    defp encode_width({acc, acc_size}, msg) do
      if msg.width == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.width)
        {["(", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:width, "invalid field value"), __STACKTRACE__
    end

    defp encode_muted({acc, acc_size}, msg) do
      if msg.muted == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.muted)
        {[" ", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:muted, "invalid field value"), __STACKTRACE__
    end

    defp encode_name({acc, acc_size}, msg) do
      if msg.name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.name)
        {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:name, "invalid field value"), __STACKTRACE__
    end

    defp encode_type({acc, acc_size}, msg) do
      if msg.type == :AUDIO do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.type |> LivekitProtocolEx.TrackType.encode() |> Protox.Encode.encode_enum()

        {["\x10", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:type, "invalid field value"), __STACKTRACE__
    end

    defp encode_sid({acc, acc_size}, msg) do
      if msg.sid == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.sid)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:sid, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.TrackInfo))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<20::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.BackupCodecPolicy)
              {[backup_codec_policy: value], rest}

            <<"\x9A\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 audio_features:
                   msg.audio_features ++
                     Protox.Decode.parse_repeated_enum(
                       [],
                       delimited,
                       LivekitProtocolEx.AudioTrackFeature
                     )
               ], rest}

            <<19::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.AudioTrackFeature)
              {[audio_features: msg.audio_features ++ [value]], rest}

            <<18::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 version:
                   Protox.MergeMessage.merge(
                     msg.version,
                     LivekitProtocolEx.TimedVersion.decode!(delimited)
                   )
               ], rest}

            <<17::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[stream: Protox.Decode.validate_string!(delimited)], rest}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.Encryption.Type)
              {[encryption: value], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[disable_red: value], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[stereo: value], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[codecs: msg.codecs ++ [LivekitProtocolEx.SimulcastCodecInfo.decode!(delimited)]],
               rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[mid: Protox.Decode.validate_string!(delimited)], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[mime_type: Protox.Decode.validate_string!(delimited)], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[layers: msg.layers ++ [LivekitProtocolEx.VideoLayer.decode!(delimited)]], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.TrackSource)
              {[source: value], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[disable_dtx: value], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[simulcast: value], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[height: value], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[width: value], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[muted: value], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[name: Protox.Decode.validate_string!(delimited)], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.TrackType)
              {[type: value], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[sid: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:backup_codec_policy) do
      {:ok, :PREFER_REGRESSION}
    end

    def default(:audio_features) do
      {:error, :no_default_value}
    end

    def default(:version) do
      {:ok, nil}
    end

    def default(:stream) do
      {:ok, ""}
    end

    def default(:encryption) do
      {:ok, :NONE}
    end

    def default(:disable_red) do
      {:ok, false}
    end

    def default(:stereo) do
      {:ok, false}
    end

    def default(:codecs) do
      {:error, :no_default_value}
    end

    def default(:mid) do
      {:ok, ""}
    end

    def default(:mime_type) do
      {:ok, ""}
    end

    def default(:layers) do
      {:error, :no_default_value}
    end

    def default(:source) do
      {:ok, :UNKNOWN}
    end

    def default(:disable_dtx) do
      {:ok, false}
    end

    def default(:simulcast) do
      {:ok, false}
    end

    def default(:height) do
      {:ok, 0}
    end

    def default(:width) do
      {:ok, 0}
    end

    def default(:muted) do
      {:ok, false}
    end

    def default(:name) do
      {:ok, ""}
    end

    def default(:type) do
      {:ok, :AUDIO}
    end

    def default(:sid) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        audio_features: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :packed,
          label: :repeated,
          name: :audio_features,
          tag: 19,
          type: {:enum, LivekitProtocolEx.AudioTrackFeature}
        },
        backup_codec_policy: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :PREFER_REGRESSION},
          label: :optional,
          name: :backup_codec_policy,
          tag: 20,
          type: {:enum, LivekitProtocolEx.BackupCodecPolicy}
        },
        codecs: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :codecs,
          tag: 13,
          type: {:message, LivekitProtocolEx.SimulcastCodecInfo}
        },
        disable_dtx: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :disable_dtx,
          tag: 8,
          type: :bool
        },
        disable_red: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :disable_red,
          tag: 15,
          type: :bool
        },
        encryption: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :NONE},
          label: :optional,
          name: :encryption,
          tag: 16,
          type: {:enum, LivekitProtocolEx.Encryption.Type}
        },
        height: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :height,
          tag: 6,
          type: :uint32
        },
        layers: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :layers,
          tag: 10,
          type: {:message, LivekitProtocolEx.VideoLayer}
        },
        mid: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :mid,
          tag: 12,
          type: :string
        },
        mime_type: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :mime_type,
          tag: 11,
          type: :string
        },
        muted: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :muted,
          tag: 4,
          type: :bool
        },
        name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :name,
          tag: 3,
          type: :string
        },
        sid: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :sid,
          tag: 1,
          type: :string
        },
        simulcast: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :simulcast,
          tag: 7,
          type: :bool
        },
        source: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :UNKNOWN},
          label: :optional,
          name: :source,
          tag: 9,
          type: {:enum, LivekitProtocolEx.TrackSource}
        },
        stereo: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :stereo,
          tag: 14,
          type: :bool
        },
        stream: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :stream,
          tag: 17,
          type: :string
        },
        type: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :AUDIO},
          label: :optional,
          name: :type,
          tag: 2,
          type: {:enum, LivekitProtocolEx.TrackType}
        },
        version: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :version,
          tag: 18,
          type: {:message, LivekitProtocolEx.TimedVersion}
        },
        width: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :width,
          tag: 5,
          type: :uint32
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.TrackInfo,
      syntax: :proto3
    }
  end
end
