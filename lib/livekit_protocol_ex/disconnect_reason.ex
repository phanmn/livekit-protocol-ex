# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.DisconnectReason do
  @moduledoc false
  @type t :: %__MODULE__{}
  defstruct []

  (
    @spec default() :: :UNKNOWN_REASON
    def default() do
      :UNKNOWN_REASON
    end
  )

  @spec encode(atom() | String.t()) :: integer() | atom()
  def encode(:UNKNOWN_REASON) do
    0
  end

  def encode(:CLIENT_INITIATED) do
    1
  end

  def encode(:DUPLICATE_IDENTITY) do
    2
  end

  def encode(:SERVER_SHUTDOWN) do
    3
  end

  def encode(:PARTICIPANT_REMOVED) do
    4
  end

  def encode(:ROOM_DELETED) do
    5
  end

  def encode(:STATE_MISMATCH) do
    6
  end

  def encode(:JOIN_FAILURE) do
    7
  end

  def encode(:MIGRATION) do
    8
  end

  def encode(:SIGNAL_CLOSE) do
    9
  end

  def encode(:ROOM_CLOSED) do
    10
  end

  def encode(:USER_UNAVAILABLE) do
    11
  end

  def encode(:USER_REJECTED) do
    12
  end

  def encode(:SIP_TRUNK_FAILURE) do
    13
  end

  def encode(:CONNECTION_TIMEOUT) do
    14
  end

  def encode(:MEDIA_FAILURE) do
    15
  end

  def encode(x) do
    x
  end

  @spec decode(integer()) :: atom() | integer()
  def decode(0) do
    :UNKNOWN_REASON
  end

  def decode(1) do
    :CLIENT_INITIATED
  end

  def decode(2) do
    :DUPLICATE_IDENTITY
  end

  def decode(3) do
    :SERVER_SHUTDOWN
  end

  def decode(4) do
    :PARTICIPANT_REMOVED
  end

  def decode(5) do
    :ROOM_DELETED
  end

  def decode(6) do
    :STATE_MISMATCH
  end

  def decode(7) do
    :JOIN_FAILURE
  end

  def decode(8) do
    :MIGRATION
  end

  def decode(9) do
    :SIGNAL_CLOSE
  end

  def decode(10) do
    :ROOM_CLOSED
  end

  def decode(11) do
    :USER_UNAVAILABLE
  end

  def decode(12) do
    :USER_REJECTED
  end

  def decode(13) do
    :SIP_TRUNK_FAILURE
  end

  def decode(14) do
    :CONNECTION_TIMEOUT
  end

  def decode(15) do
    :MEDIA_FAILURE
  end

  def decode(x) do
    x
  end

  @spec constants() :: [{integer(), atom()}]
  def constants() do
    [
      {0, :UNKNOWN_REASON},
      {1, :CLIENT_INITIATED},
      {2, :DUPLICATE_IDENTITY},
      {3, :SERVER_SHUTDOWN},
      {4, :PARTICIPANT_REMOVED},
      {5, :ROOM_DELETED},
      {6, :STATE_MISMATCH},
      {7, :JOIN_FAILURE},
      {8, :MIGRATION},
      {9, :SIGNAL_CLOSE},
      {10, :ROOM_CLOSED},
      {11, :USER_UNAVAILABLE},
      {12, :USER_REJECTED},
      {13, :SIP_TRUNK_FAILURE},
      {14, :CONNECTION_TIMEOUT},
      {15, :MEDIA_FAILURE}
    ]
  end

  @spec has_constant?(any()) :: boolean()
  (
    def has_constant?(:UNKNOWN_REASON) do
      true
    end

    def has_constant?(:CLIENT_INITIATED) do
      true
    end

    def has_constant?(:DUPLICATE_IDENTITY) do
      true
    end

    def has_constant?(:SERVER_SHUTDOWN) do
      true
    end

    def has_constant?(:PARTICIPANT_REMOVED) do
      true
    end

    def has_constant?(:ROOM_DELETED) do
      true
    end

    def has_constant?(:STATE_MISMATCH) do
      true
    end

    def has_constant?(:JOIN_FAILURE) do
      true
    end

    def has_constant?(:MIGRATION) do
      true
    end

    def has_constant?(:SIGNAL_CLOSE) do
      true
    end

    def has_constant?(:ROOM_CLOSED) do
      true
    end

    def has_constant?(:USER_UNAVAILABLE) do
      true
    end

    def has_constant?(:USER_REJECTED) do
      true
    end

    def has_constant?(:SIP_TRUNK_FAILURE) do
      true
    end

    def has_constant?(:CONNECTION_TIMEOUT) do
      true
    end

    def has_constant?(:MEDIA_FAILURE) do
      true
    end

    def has_constant?(_) do
      false
    end
  )
end
