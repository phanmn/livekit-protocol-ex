# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.WorkerMessage do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          message:
            {:register, LivekitProtocolEx.RegisterWorkerRequest.t()}
            | {:availability, LivekitProtocolEx.AvailabilityResponse.t()}
            | {:update_worker, LivekitProtocolEx.UpdateWorkerStatus.t()}
            | {:update_job, LivekitProtocolEx.UpdateJobStatus.t()}
            | {:ping, LivekitProtocolEx.WorkerPing.t()}
            | {:simulate_job, LivekitProtocolEx.SimulateJobRequest.t()}
            | {:migrate_job, LivekitProtocolEx.MigrateJobRequest.t()}
            | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct message: nil, __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0} |> encode_message(msg) |> encode_unknown_fields(msg)
      end
    )

    defp encode_message({acc, acc_size}, msg) do
      case msg.message do
        nil ->
          {acc, acc_size}

        {:migrate_job, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {[":", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:simulate_job, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:ping, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:update_job, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:update_worker, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:availability, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:register, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.WorkerMessage))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:migrate_job, previous_value} ->
                     {:message,
                      {:migrate_job,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.MigrateJobRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:migrate_job, LivekitProtocolEx.MigrateJobRequest.decode!(delimited)}}
                 end
               ], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:simulate_job, previous_value} ->
                     {:message,
                      {:simulate_job,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SimulateJobRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:simulate_job, LivekitProtocolEx.SimulateJobRequest.decode!(delimited)}}
                 end
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:ping, previous_value} ->
                     {:message,
                      {:ping,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.WorkerPing.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:ping, LivekitProtocolEx.WorkerPing.decode!(delimited)}}
                 end
               ], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:update_job, previous_value} ->
                     {:message,
                      {:update_job,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.UpdateJobStatus.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:update_job, LivekitProtocolEx.UpdateJobStatus.decode!(delimited)}}
                 end
               ], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:update_worker, previous_value} ->
                     {:message,
                      {:update_worker,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.UpdateWorkerStatus.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:update_worker, LivekitProtocolEx.UpdateWorkerStatus.decode!(delimited)}}
                 end
               ], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:availability, previous_value} ->
                     {:message,
                      {:availability,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.AvailabilityResponse.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:availability, LivekitProtocolEx.AvailabilityResponse.decode!(delimited)}}
                 end
               ], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:register, previous_value} ->
                     {:message,
                      {:register,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.RegisterWorkerRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:register, LivekitProtocolEx.RegisterWorkerRequest.decode!(delimited)}}
                 end
               ], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:migrate_job) do
      {:error, :no_default_value}
    end

    def default(:simulate_job) do
      {:error, :no_default_value}
    end

    def default(:ping) do
      {:error, :no_default_value}
    end

    def default(:update_job) do
      {:error, :no_default_value}
    end

    def default(:update_worker) do
      {:error, :no_default_value}
    end

    def default(:availability) do
      {:error, :no_default_value}
    end

    def default(:register) do
      {:error, :no_default_value}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        availability: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :availability,
          tag: 2,
          type: {:message, LivekitProtocolEx.AvailabilityResponse}
        },
        migrate_job: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :migrate_job,
          tag: 7,
          type: {:message, LivekitProtocolEx.MigrateJobRequest}
        },
        ping: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :ping,
          tag: 5,
          type: {:message, LivekitProtocolEx.WorkerPing}
        },
        register: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :register,
          tag: 1,
          type: {:message, LivekitProtocolEx.RegisterWorkerRequest}
        },
        simulate_job: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :simulate_job,
          tag: 6,
          type: {:message, LivekitProtocolEx.SimulateJobRequest}
        },
        update_job: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :update_job,
          tag: 4,
          type: {:message, LivekitProtocolEx.UpdateJobStatus}
        },
        update_worker: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :update_worker,
          tag: 3,
          type: {:message, LivekitProtocolEx.UpdateWorkerStatus}
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.WorkerMessage,
      syntax: :proto3
    }
  end
end
