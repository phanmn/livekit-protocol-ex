# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.ParticipantInfo do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          kind_details: [atom()],
          joined_at_ms: integer(),
          disconnect_reason: atom(),
          attributes: %{String.t() => String.t()},
          kind: atom(),
          is_publisher: boolean(),
          region: String.t(),
          permission: LivekitProtocolEx.ParticipantPermission.t() | nil,
          version: non_neg_integer(),
          name: String.t(),
          joined_at: integer(),
          metadata: String.t(),
          tracks: [LivekitProtocolEx.TrackInfo.t()],
          state: atom(),
          identity: String.t(),
          sid: String.t(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct kind_details: [],
            joined_at_ms: 0,
            disconnect_reason: :UNKNOWN_REASON,
            attributes: %{},
            kind: :STANDARD,
            is_publisher: false,
            region: "",
            permission: nil,
            version: 0,
            name: "",
            joined_at: 0,
            metadata: "",
            tracks: [],
            state: :JOINING,
            identity: "",
            sid: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_kind_details(msg)
        |> encode_joined_at_ms(msg)
        |> encode_disconnect_reason(msg)
        |> encode_attributes(msg)
        |> encode_kind(msg)
        |> encode_is_publisher(msg)
        |> encode_region(msg)
        |> encode_permission(msg)
        |> encode_version(msg)
        |> encode_name(msg)
        |> encode_joined_at(msg)
        |> encode_metadata(msg)
        |> encode_tracks(msg)
        |> encode_state(msg)
        |> encode_identity(msg)
        |> encode_sid(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_kind_details({acc, acc_size}, msg) do
      case msg.kind_details do
        [] ->
          {acc, acc_size}

        values ->
          {packed_bytes, packed_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} =
                    value
                    |> LivekitProtocolEx.ParticipantInfo.KindDetail.encode()
                    |> Protox.Encode.encode_enum()

                  {[value_bytes | local_acc], local_acc_size + value_bytes_size}
                end)

              {value_size_bytes, value_size_size} = Protox.Varint.encode(value_size)
              {[value_size_bytes, Enum.reverse(value_bytes)], value_size + value_size_size}
            )

          {["\x92\x01", packed_bytes | acc], acc_size + 2 + packed_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:kind_details, "invalid field value"), __STACKTRACE__
    end

    defp encode_joined_at_ms({acc, acc_size}, msg) do
      if msg.joined_at_ms == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.joined_at_ms)
        {["\x88\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:joined_at_ms, "invalid field value"), __STACKTRACE__
    end

    defp encode_disconnect_reason({acc, acc_size}, msg) do
      if msg.disconnect_reason == :UNKNOWN_REASON do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.disconnect_reason
          |> LivekitProtocolEx.DisconnectReason.encode()
          |> Protox.Encode.encode_enum()

        {["\x80\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:disconnect_reason, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_attributes({acc, acc_size}, msg) do
      map = Map.fetch!(msg, :attributes)

      if map_size(map) == 0 do
        {acc, acc_size}
      else
        Enum.reduce(map, {acc, acc_size}, fn {k, v}, {acc, acc_size} ->
          {k_value_bytes, k_value_len} = Protox.Encode.encode_string(k)
          {v_value_bytes, v_value_len} = Protox.Encode.encode_string(v)
          len = 2 + k_value_len + v_value_len
          {len_varint, len_varint_size} = Protox.Varint.encode(len)
          acc = [<<"z", len_varint::binary, "\n">>, k_value_bytes, "\x12", v_value_bytes | acc]
          {acc, acc_size + 3 + k_value_len + v_value_len + len_varint_size}
        end)
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:attributes, "invalid field value"), __STACKTRACE__
    end

    defp encode_kind({acc, acc_size}, msg) do
      if msg.kind == :STANDARD do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.kind
          |> LivekitProtocolEx.ParticipantInfo.Kind.encode()
          |> Protox.Encode.encode_enum()

        {["p", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:kind, "invalid field value"), __STACKTRACE__
    end

    defp encode_is_publisher({acc, acc_size}, msg) do
      if msg.is_publisher == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.is_publisher)
        {["h", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:is_publisher, "invalid field value"), __STACKTRACE__
    end

    defp encode_region({acc, acc_size}, msg) do
      if msg.region == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.region)
        {["b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:region, "invalid field value"), __STACKTRACE__
    end

    defp encode_permission({acc, acc_size}, msg) do
      if msg.permission == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.permission)
        {["Z", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:permission, "invalid field value"), __STACKTRACE__
    end

    defp encode_version({acc, acc_size}, msg) do
      if msg.version == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.version)
        {["P", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:version, "invalid field value"), __STACKTRACE__
    end

    defp encode_name({acc, acc_size}, msg) do
      if msg.name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.name)
        {["J", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:name, "invalid field value"), __STACKTRACE__
    end

    defp encode_joined_at({acc, acc_size}, msg) do
      if msg.joined_at == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.joined_at)
        {["0", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:joined_at, "invalid field value"), __STACKTRACE__
    end

    defp encode_metadata({acc, acc_size}, msg) do
      if msg.metadata == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.metadata)
        {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:metadata, "invalid field value"), __STACKTRACE__
    end

    defp encode_tracks({acc, acc_size}, msg) do
      case msg.tracks do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\"" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:tracks, "invalid field value"), __STACKTRACE__
    end

    defp encode_state({acc, acc_size}, msg) do
      if msg.state == :JOINING do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.state
          |> LivekitProtocolEx.ParticipantInfo.State.encode()
          |> Protox.Encode.encode_enum()

        {["\x18", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:state, "invalid field value"), __STACKTRACE__
    end

    defp encode_identity({acc, acc_size}, msg) do
      if msg.identity == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.identity)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:identity, "invalid field value"), __STACKTRACE__
    end

    defp encode_sid({acc, acc_size}, msg) do
      if msg.sid == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.sid)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:sid, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.ParticipantInfo))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<"\x92\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 kind_details:
                   msg.kind_details ++
                     Protox.Decode.parse_repeated_enum(
                       [],
                       delimited,
                       LivekitProtocolEx.ParticipantInfo.KindDetail
                     )
               ], rest}

            <<18::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} =
                Protox.Decode.parse_enum(bytes, LivekitProtocolEx.ParticipantInfo.KindDetail)

              {[kind_details: msg.kind_details ++ [value]], rest}

            <<17::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[joined_at_ms: value], rest}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.DisconnectReason)
              {[disconnect_reason: value], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 (
                   {entry_key, entry_value} =
                     (
                       {map_key, map_value} = parse_string_string({:unset, :unset}, delimited)

                       map_key =
                         case map_key do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_key
                         end

                       map_value =
                         case map_value do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_value
                         end

                       {map_key, map_value}
                     )

                   {:attributes, Map.put(msg.attributes, entry_key, entry_value)}
                 )
               ], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {value, rest} =
                Protox.Decode.parse_enum(bytes, LivekitProtocolEx.ParticipantInfo.Kind)

              {[kind: value], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[is_publisher: value], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[region: Protox.Decode.validate_string!(delimited)], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 permission:
                   Protox.MergeMessage.merge(
                     msg.permission,
                     LivekitProtocolEx.ParticipantPermission.decode!(delimited)
                   )
               ], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[version: value], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[name: Protox.Decode.validate_string!(delimited)], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[joined_at: value], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[metadata: Protox.Decode.validate_string!(delimited)], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[tracks: msg.tracks ++ [LivekitProtocolEx.TrackInfo.decode!(delimited)]], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {value, rest} =
                Protox.Decode.parse_enum(bytes, LivekitProtocolEx.ParticipantInfo.State)

              {[state: value], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[identity: Protox.Decode.validate_string!(delimited)], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[sid: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )

    (
      defp parse_string_string(map_entry, <<>>) do
        map_entry
      end

      defp parse_string_string({entry_key, entry_value}, bytes) do
        {map_entry, rest} =
          case Protox.Decode.parse_key(bytes) do
            {1, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{res, entry_value}, rest}

            {2, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{entry_key, res}, rest}

            {tag, wire_type, rest} ->
              {_, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {{entry_key, entry_value}, rest}
          end

        parse_string_string(map_entry, rest)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:kind_details) do
      {:error, :no_default_value}
    end

    def default(:joined_at_ms) do
      {:ok, 0}
    end

    def default(:disconnect_reason) do
      {:ok, :UNKNOWN_REASON}
    end

    def default(:attributes) do
      {:error, :no_default_value}
    end

    def default(:kind) do
      {:ok, :STANDARD}
    end

    def default(:is_publisher) do
      {:ok, false}
    end

    def default(:region) do
      {:ok, ""}
    end

    def default(:permission) do
      {:ok, nil}
    end

    def default(:version) do
      {:ok, 0}
    end

    def default(:name) do
      {:ok, ""}
    end

    def default(:joined_at) do
      {:ok, 0}
    end

    def default(:metadata) do
      {:ok, ""}
    end

    def default(:tracks) do
      {:error, :no_default_value}
    end

    def default(:state) do
      {:ok, :JOINING}
    end

    def default(:identity) do
      {:ok, ""}
    end

    def default(:sid) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        attributes: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :map,
          label: nil,
          name: :attributes,
          tag: 15,
          type: {:string, :string}
        },
        disconnect_reason: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :UNKNOWN_REASON},
          label: :optional,
          name: :disconnect_reason,
          tag: 16,
          type: {:enum, LivekitProtocolEx.DisconnectReason}
        },
        identity: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :identity,
          tag: 2,
          type: :string
        },
        is_publisher: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :is_publisher,
          tag: 13,
          type: :bool
        },
        joined_at: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :joined_at,
          tag: 6,
          type: :int64
        },
        joined_at_ms: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :joined_at_ms,
          tag: 17,
          type: :int64
        },
        kind: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :STANDARD},
          label: :optional,
          name: :kind,
          tag: 14,
          type: {:enum, LivekitProtocolEx.ParticipantInfo.Kind}
        },
        kind_details: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :packed,
          label: :repeated,
          name: :kind_details,
          tag: 18,
          type: {:enum, LivekitProtocolEx.ParticipantInfo.KindDetail}
        },
        metadata: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :metadata,
          tag: 5,
          type: :string
        },
        name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :name,
          tag: 9,
          type: :string
        },
        permission: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :permission,
          tag: 11,
          type: {:message, LivekitProtocolEx.ParticipantPermission}
        },
        region: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :region,
          tag: 12,
          type: :string
        },
        sid: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :sid,
          tag: 1,
          type: :string
        },
        state: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :JOINING},
          label: :optional,
          name: :state,
          tag: 3,
          type: {:enum, LivekitProtocolEx.ParticipantInfo.State}
        },
        tracks: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :tracks,
          tag: 4,
          type: {:message, LivekitProtocolEx.TrackInfo}
        },
        version: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :version,
          tag: 10,
          type: :uint32
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.ParticipantInfo,
      syntax: :proto3
    }
  end
end
