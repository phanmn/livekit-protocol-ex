# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.SIPCallInfo do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          provider_info: LivekitProtocolEx.ProviderInfo.t() | nil,
          call_context: [Google.Protobuf.Any.t()],
          pcap_file_link: String.t(),
          ended_at_ns: integer(),
          started_at_ns: integer(),
          created_at_ns: integer(),
          media_encryption: String.t(),
          audio_codec: String.t(),
          call_status_code: LivekitProtocolEx.SIPStatus.t() | nil,
          participant_attributes: %{String.t() => String.t()},
          region: String.t(),
          dispatch_rule_id: String.t(),
          call_direction: atom(),
          enabled_features: [atom()],
          error: String.t(),
          disconnect_reason: atom(),
          ended_at: integer(),
          started_at: integer(),
          created_at: integer(),
          call_status: atom(),
          to_uri: LivekitProtocolEx.SIPUri.t() | nil,
          from_uri: LivekitProtocolEx.SIPUri.t() | nil,
          participant_identity: String.t(),
          room_id: String.t(),
          room_name: String.t(),
          trunk_id: String.t(),
          call_id: String.t(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct provider_info: nil,
            call_context: [],
            pcap_file_link: "",
            ended_at_ns: 0,
            started_at_ns: 0,
            created_at_ns: 0,
            media_encryption: "",
            audio_codec: "",
            call_status_code: nil,
            participant_attributes: %{},
            region: "",
            dispatch_rule_id: "",
            call_direction: :SCD_UNKNOWN,
            enabled_features: [],
            error: "",
            disconnect_reason: :UNKNOWN_REASON,
            ended_at: 0,
            started_at: 0,
            created_at: 0,
            call_status: :SCS_CALL_INCOMING,
            to_uri: nil,
            from_uri: nil,
            participant_identity: "",
            room_id: "",
            room_name: "",
            trunk_id: "",
            call_id: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_provider_info(msg)
        |> encode_call_context(msg)
        |> encode_pcap_file_link(msg)
        |> encode_ended_at_ns(msg)
        |> encode_started_at_ns(msg)
        |> encode_created_at_ns(msg)
        |> encode_media_encryption(msg)
        |> encode_audio_codec(msg)
        |> encode_call_status_code(msg)
        |> encode_participant_attributes(msg)
        |> encode_region(msg)
        |> encode_dispatch_rule_id(msg)
        |> encode_call_direction(msg)
        |> encode_enabled_features(msg)
        |> encode_error(msg)
        |> encode_disconnect_reason(msg)
        |> encode_ended_at(msg)
        |> encode_started_at(msg)
        |> encode_created_at(msg)
        |> encode_call_status(msg)
        |> encode_to_uri(msg)
        |> encode_from_uri(msg)
        |> encode_participant_identity(msg)
        |> encode_room_id(msg)
        |> encode_room_name(msg)
        |> encode_trunk_id(msg)
        |> encode_call_id(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_provider_info({acc, acc_size}, msg) do
      if msg.provider_info == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.provider_info)
        {["\xDA\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:provider_info, "invalid field value"), __STACKTRACE__
    end

    defp encode_call_context({acc, acc_size}, msg) do
      case msg.call_context do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\xD2\x01" | local_acc], local_acc_size + 2 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:call_context, "invalid field value"), __STACKTRACE__
    end

    defp encode_pcap_file_link({acc, acc_size}, msg) do
      if msg.pcap_file_link == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.pcap_file_link)
        {["\xCA\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:pcap_file_link, "invalid field value"), __STACKTRACE__
    end

    defp encode_ended_at_ns({acc, acc_size}, msg) do
      if msg.ended_at_ns == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.ended_at_ns)
        {["\xC0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ended_at_ns, "invalid field value"), __STACKTRACE__
    end

    defp encode_started_at_ns({acc, acc_size}, msg) do
      if msg.started_at_ns == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.started_at_ns)
        {["\xB8\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:started_at_ns, "invalid field value"), __STACKTRACE__
    end

    defp encode_created_at_ns({acc, acc_size}, msg) do
      if msg.created_at_ns == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.created_at_ns)
        {["\xB0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:created_at_ns, "invalid field value"), __STACKTRACE__
    end

    defp encode_media_encryption({acc, acc_size}, msg) do
      if msg.media_encryption == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.media_encryption)
        {["\xAA\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:media_encryption, "invalid field value"), __STACKTRACE__
    end

    defp encode_audio_codec({acc, acc_size}, msg) do
      if msg.audio_codec == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.audio_codec)
        {["\xA2\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:audio_codec, "invalid field value"), __STACKTRACE__
    end

    defp encode_call_status_code({acc, acc_size}, msg) do
      if msg.call_status_code == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.call_status_code)
        {["\x9A\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:call_status_code, "invalid field value"), __STACKTRACE__
    end

    defp encode_participant_attributes({acc, acc_size}, msg) do
      map = Map.fetch!(msg, :participant_attributes)

      if map_size(map) == 0 do
        {acc, acc_size}
      else
        Enum.reduce(map, {acc, acc_size}, fn {k, v}, {acc, acc_size} ->
          {k_value_bytes, k_value_len} = Protox.Encode.encode_string(k)
          {v_value_bytes, v_value_len} = Protox.Encode.encode_string(v)
          len = 2 + k_value_len + v_value_len
          {len_varint, len_varint_size} = Protox.Varint.encode(len)

          acc = [
            <<"\x92\x01", len_varint::binary, "\n">>,
            k_value_bytes,
            "\x12",
            v_value_bytes | acc
          ]

          {acc, acc_size + 4 + k_value_len + v_value_len + len_varint_size}
        end)
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:participant_attributes, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_region({acc, acc_size}, msg) do
      if msg.region == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.region)
        {["\x8A\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:region, "invalid field value"), __STACKTRACE__
    end

    defp encode_dispatch_rule_id({acc, acc_size}, msg) do
      if msg.dispatch_rule_id == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.dispatch_rule_id)
        {["\x82\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:dispatch_rule_id, "invalid field value"), __STACKTRACE__
    end

    defp encode_call_direction({acc, acc_size}, msg) do
      if msg.call_direction == :SCD_UNKNOWN do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.call_direction
          |> LivekitProtocolEx.SIPCallDirection.encode()
          |> Protox.Encode.encode_enum()

        {["x", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:call_direction, "invalid field value"), __STACKTRACE__
    end

    defp encode_enabled_features({acc, acc_size}, msg) do
      case msg.enabled_features do
        [] ->
          {acc, acc_size}

        values ->
          {packed_bytes, packed_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} =
                    value |> LivekitProtocolEx.SIPFeature.encode() |> Protox.Encode.encode_enum()

                  {[value_bytes | local_acc], local_acc_size + value_bytes_size}
                end)

              {value_size_bytes, value_size_size} = Protox.Varint.encode(value_size)
              {[value_size_bytes, Enum.reverse(value_bytes)], value_size + value_size_size}
            )

          {["r", packed_bytes | acc], acc_size + 1 + packed_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:enabled_features, "invalid field value"), __STACKTRACE__
    end

    defp encode_error({acc, acc_size}, msg) do
      if msg.error == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.error)
        {["j", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:error, "invalid field value"), __STACKTRACE__
    end

    defp encode_disconnect_reason({acc, acc_size}, msg) do
      if msg.disconnect_reason == :UNKNOWN_REASON do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.disconnect_reason
          |> LivekitProtocolEx.DisconnectReason.encode()
          |> Protox.Encode.encode_enum()

        {["`", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:disconnect_reason, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_ended_at({acc, acc_size}, msg) do
      if msg.ended_at == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.ended_at)
        {["X", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ended_at, "invalid field value"), __STACKTRACE__
    end

    defp encode_started_at({acc, acc_size}, msg) do
      if msg.started_at == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.started_at)
        {["P", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:started_at, "invalid field value"), __STACKTRACE__
    end

    defp encode_created_at({acc, acc_size}, msg) do
      if msg.created_at == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.created_at)
        {["H", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:created_at, "invalid field value"), __STACKTRACE__
    end

    defp encode_call_status({acc, acc_size}, msg) do
      if msg.call_status == :SCS_CALL_INCOMING do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.call_status
          |> LivekitProtocolEx.SIPCallStatus.encode()
          |> Protox.Encode.encode_enum()

        {["@", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:call_status, "invalid field value"), __STACKTRACE__
    end

    defp encode_to_uri({acc, acc_size}, msg) do
      if msg.to_uri == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.to_uri)
        {[":", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:to_uri, "invalid field value"), __STACKTRACE__
    end

    defp encode_from_uri({acc, acc_size}, msg) do
      if msg.from_uri == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.from_uri)
        {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:from_uri, "invalid field value"), __STACKTRACE__
    end

    defp encode_participant_identity({acc, acc_size}, msg) do
      if msg.participant_identity == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.participant_identity)
        {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:participant_identity, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_room_id({acc, acc_size}, msg) do
      if msg.room_id == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.room_id)
        {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:room_id, "invalid field value"), __STACKTRACE__
    end

    defp encode_room_name({acc, acc_size}, msg) do
      if msg.room_name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.room_name)
        {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:room_name, "invalid field value"), __STACKTRACE__
    end

    defp encode_trunk_id({acc, acc_size}, msg) do
      if msg.trunk_id == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.trunk_id)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:trunk_id, "invalid field value"), __STACKTRACE__
    end

    defp encode_call_id({acc, acc_size}, msg) do
      if msg.call_id == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.call_id)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:call_id, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.SIPCallInfo))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<27::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 provider_info:
                   Protox.MergeMessage.merge(
                     msg.provider_info,
                     LivekitProtocolEx.ProviderInfo.decode!(delimited)
                   )
               ], rest}

            <<26::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[call_context: msg.call_context ++ [Google.Protobuf.Any.decode!(delimited)]], rest}

            <<25::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[pcap_file_link: Protox.Decode.validate_string!(delimited)], rest}

            <<24::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[ended_at_ns: value], rest}

            <<23::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[started_at_ns: value], rest}

            <<22::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[created_at_ns: value], rest}

            <<21::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[media_encryption: Protox.Decode.validate_string!(delimited)], rest}

            <<20::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[audio_codec: Protox.Decode.validate_string!(delimited)], rest}

            <<19::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 call_status_code:
                   Protox.MergeMessage.merge(
                     msg.call_status_code,
                     LivekitProtocolEx.SIPStatus.decode!(delimited)
                   )
               ], rest}

            <<18::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 (
                   {entry_key, entry_value} =
                     (
                       {map_key, map_value} = parse_string_string({:unset, :unset}, delimited)

                       map_key =
                         case map_key do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_key
                         end

                       map_value =
                         case map_value do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_value
                         end

                       {map_key, map_value}
                     )

                   {:participant_attributes,
                    Map.put(msg.participant_attributes, entry_key, entry_value)}
                 )
               ], rest}

            <<17::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[region: Protox.Decode.validate_string!(delimited)], rest}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[dispatch_rule_id: Protox.Decode.validate_string!(delimited)], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.SIPCallDirection)
              {[call_direction: value], rest}

            <<"r", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 enabled_features:
                   msg.enabled_features ++
                     Protox.Decode.parse_repeated_enum(
                       [],
                       delimited,
                       LivekitProtocolEx.SIPFeature
                     )
               ], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.SIPFeature)
              {[enabled_features: msg.enabled_features ++ [value]], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[error: Protox.Decode.validate_string!(delimited)], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.DisconnectReason)
              {[disconnect_reason: value], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[ended_at: value], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[started_at: value], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[created_at: value], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.SIPCallStatus)
              {[call_status: value], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 to_uri:
                   Protox.MergeMessage.merge(
                     msg.to_uri,
                     LivekitProtocolEx.SIPUri.decode!(delimited)
                   )
               ], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 from_uri:
                   Protox.MergeMessage.merge(
                     msg.from_uri,
                     LivekitProtocolEx.SIPUri.decode!(delimited)
                   )
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[participant_identity: Protox.Decode.validate_string!(delimited)], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[room_id: Protox.Decode.validate_string!(delimited)], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[room_name: Protox.Decode.validate_string!(delimited)], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[trunk_id: Protox.Decode.validate_string!(delimited)], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[call_id: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )

    (
      defp parse_string_string(map_entry, <<>>) do
        map_entry
      end

      defp parse_string_string({entry_key, entry_value}, bytes) do
        {map_entry, rest} =
          case Protox.Decode.parse_key(bytes) do
            {1, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{res, entry_value}, rest}

            {2, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{entry_key, res}, rest}

            {tag, wire_type, rest} ->
              {_, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {{entry_key, entry_value}, rest}
          end

        parse_string_string(map_entry, rest)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:provider_info) do
      {:ok, nil}
    end

    def default(:call_context) do
      {:error, :no_default_value}
    end

    def default(:pcap_file_link) do
      {:ok, ""}
    end

    def default(:ended_at_ns) do
      {:ok, 0}
    end

    def default(:started_at_ns) do
      {:ok, 0}
    end

    def default(:created_at_ns) do
      {:ok, 0}
    end

    def default(:media_encryption) do
      {:ok, ""}
    end

    def default(:audio_codec) do
      {:ok, ""}
    end

    def default(:call_status_code) do
      {:ok, nil}
    end

    def default(:participant_attributes) do
      {:error, :no_default_value}
    end

    def default(:region) do
      {:ok, ""}
    end

    def default(:dispatch_rule_id) do
      {:ok, ""}
    end

    def default(:call_direction) do
      {:ok, :SCD_UNKNOWN}
    end

    def default(:enabled_features) do
      {:error, :no_default_value}
    end

    def default(:error) do
      {:ok, ""}
    end

    def default(:disconnect_reason) do
      {:ok, :UNKNOWN_REASON}
    end

    def default(:ended_at) do
      {:ok, 0}
    end

    def default(:started_at) do
      {:ok, 0}
    end

    def default(:created_at) do
      {:ok, 0}
    end

    def default(:call_status) do
      {:ok, :SCS_CALL_INCOMING}
    end

    def default(:to_uri) do
      {:ok, nil}
    end

    def default(:from_uri) do
      {:ok, nil}
    end

    def default(:participant_identity) do
      {:ok, ""}
    end

    def default(:room_id) do
      {:ok, ""}
    end

    def default(:room_name) do
      {:ok, ""}
    end

    def default(:trunk_id) do
      {:ok, ""}
    end

    def default(:call_id) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        audio_codec: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :audio_codec,
          tag: 20,
          type: :string
        },
        call_context: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :call_context,
          tag: 26,
          type: {:message, Google.Protobuf.Any}
        },
        call_direction: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :SCD_UNKNOWN},
          label: :optional,
          name: :call_direction,
          tag: 15,
          type: {:enum, LivekitProtocolEx.SIPCallDirection}
        },
        call_id: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :call_id,
          tag: 1,
          type: :string
        },
        call_status: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :SCS_CALL_INCOMING},
          label: :optional,
          name: :call_status,
          tag: 8,
          type: {:enum, LivekitProtocolEx.SIPCallStatus}
        },
        call_status_code: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :call_status_code,
          tag: 19,
          type: {:message, LivekitProtocolEx.SIPStatus}
        },
        created_at: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :created_at,
          tag: 9,
          type: :int64
        },
        created_at_ns: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :created_at_ns,
          tag: 22,
          type: :int64
        },
        disconnect_reason: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :UNKNOWN_REASON},
          label: :optional,
          name: :disconnect_reason,
          tag: 12,
          type: {:enum, LivekitProtocolEx.DisconnectReason}
        },
        dispatch_rule_id: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :dispatch_rule_id,
          tag: 16,
          type: :string
        },
        enabled_features: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :packed,
          label: :repeated,
          name: :enabled_features,
          tag: 14,
          type: {:enum, LivekitProtocolEx.SIPFeature}
        },
        ended_at: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :ended_at,
          tag: 11,
          type: :int64
        },
        ended_at_ns: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :ended_at_ns,
          tag: 24,
          type: :int64
        },
        error: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :error,
          tag: 13,
          type: :string
        },
        from_uri: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :from_uri,
          tag: 6,
          type: {:message, LivekitProtocolEx.SIPUri}
        },
        media_encryption: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :media_encryption,
          tag: 21,
          type: :string
        },
        participant_attributes: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :map,
          label: nil,
          name: :participant_attributes,
          tag: 18,
          type: {:string, :string}
        },
        participant_identity: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :participant_identity,
          tag: 5,
          type: :string
        },
        pcap_file_link: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :pcap_file_link,
          tag: 25,
          type: :string
        },
        provider_info: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :provider_info,
          tag: 27,
          type: {:message, LivekitProtocolEx.ProviderInfo}
        },
        region: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :region,
          tag: 17,
          type: :string
        },
        room_id: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :room_id,
          tag: 4,
          type: :string
        },
        room_name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :room_name,
          tag: 3,
          type: :string
        },
        started_at: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :started_at,
          tag: 10,
          type: :int64
        },
        started_at_ns: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :started_at_ns,
          tag: 23,
          type: :int64
        },
        to_uri: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :to_uri,
          tag: 7,
          type: {:message, LivekitProtocolEx.SIPUri}
        },
        trunk_id: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :trunk_id,
          tag: 2,
          type: :string
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.SIPCallInfo,
      syntax: :proto3
    }
  end
end
