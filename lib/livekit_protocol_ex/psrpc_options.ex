# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.Psrpc.Options do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          type: atom(),
          stream: boolean(),
          topic_params: LivekitProtocolEx.Psrpc.TopicParamOptions.t() | nil,
          topics: boolean(),
          subscription: boolean(),
          routing: {:multi, boolean()} | {:affinity_func, boolean()} | {:queue, boolean()} | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct type: :QUEUE,
            routing: nil,
            stream: false,
            topic_params: nil,
            topics: false,
            subscription: false,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_routing(msg)
        |> encode_type(msg)
        |> encode_stream(msg)
        |> encode_topic_params(msg)
        |> encode_topics(msg)
        |> encode_subscription(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_routing({acc, acc_size}, msg) do
      case msg.routing do
        nil ->
          {acc, acc_size}

        {:queue, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(child_field_value)
          {["8", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:affinity_func, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(child_field_value)
          {["0", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:multi, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(child_field_value)
          {["(", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    end

    defp encode_type({acc, acc_size}, msg) do
      if msg.type == :QUEUE do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.type |> LivekitProtocolEx.Psrpc.Routing.encode() |> Protox.Encode.encode_enum()

        {["@", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:type, "invalid field value"), __STACKTRACE__
    end

    defp encode_stream({acc, acc_size}, msg) do
      if msg.stream == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.stream)
        {[" ", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:stream, "invalid field value"), __STACKTRACE__
    end

    defp encode_topic_params({acc, acc_size}, msg) do
      if msg.topic_params == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.topic_params)
        {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:topic_params, "invalid field value"), __STACKTRACE__
    end

    defp encode_topics({acc, acc_size}, msg) do
      if msg.topics == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.topics)
        {["\x10", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:topics, "invalid field value"), __STACKTRACE__
    end

    defp encode_subscription({acc, acc_size}, msg) do
      if msg.subscription == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.subscription)
        {["\b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:subscription, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.Psrpc.Options))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.Psrpc.Routing)
              {[type: value], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[routing: {:queue, value}], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[routing: {:affinity_func, value}], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[routing: {:multi, value}], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[stream: value], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 topic_params:
                   Protox.MergeMessage.merge(
                     msg.topic_params,
                     LivekitProtocolEx.Psrpc.TopicParamOptions.decode!(delimited)
                   )
               ], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[topics: value], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[subscription: value], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:type) do
      {:ok, :QUEUE}
    end

    def default(:queue) do
      {:error, :no_default_value}
    end

    def default(:affinity_func) do
      {:error, :no_default_value}
    end

    def default(:multi) do
      {:error, :no_default_value}
    end

    def default(:stream) do
      {:ok, false}
    end

    def default(:topic_params) do
      {:ok, nil}
    end

    def default(:topics) do
      {:ok, false}
    end

    def default(:subscription) do
      {:ok, false}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        affinity_func: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :routing},
          label: :optional,
          name: :affinity_func,
          tag: 6,
          type: :bool
        },
        multi: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :routing},
          label: :optional,
          name: :multi,
          tag: 5,
          type: :bool
        },
        queue: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :routing},
          label: :optional,
          name: :queue,
          tag: 7,
          type: :bool
        },
        stream: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :stream,
          tag: 4,
          type: :bool
        },
        subscription: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :subscription,
          tag: 1,
          type: :bool
        },
        topic_params: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :topic_params,
          tag: 3,
          type: {:message, LivekitProtocolEx.Psrpc.TopicParamOptions}
        },
        topics: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :topics,
          tag: 2,
          type: :bool
        },
        type: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :QUEUE},
          label: :optional,
          name: :type,
          tag: 8,
          type: {:enum, LivekitProtocolEx.Psrpc.Routing}
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: nil,
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/psrpc/protoc-gen-psrpc/options",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: nil,
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.Psrpc.Options,
      syntax: :proto3
    }
  end
end
