# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.ParticipantPermission do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          can_subscribe_metrics: boolean(),
          agent: boolean(),
          can_update_metadata: boolean(),
          can_publish_sources: [atom()],
          recorder: boolean(),
          hidden: boolean(),
          can_publish_data: boolean(),
          can_publish: boolean(),
          can_subscribe: boolean(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct can_subscribe_metrics: false,
            agent: false,
            can_update_metadata: false,
            can_publish_sources: [],
            recorder: false,
            hidden: false,
            can_publish_data: false,
            can_publish: false,
            can_subscribe: false,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_can_subscribe_metrics(msg)
        |> encode_agent(msg)
        |> encode_can_update_metadata(msg)
        |> encode_can_publish_sources(msg)
        |> encode_recorder(msg)
        |> encode_hidden(msg)
        |> encode_can_publish_data(msg)
        |> encode_can_publish(msg)
        |> encode_can_subscribe(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_can_subscribe_metrics({acc, acc_size}, msg) do
      if msg.can_subscribe_metrics == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.can_subscribe_metrics)
        {["`", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:can_subscribe_metrics, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_agent({acc, acc_size}, msg) do
      if msg.agent == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.agent)
        {["X", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:agent, "invalid field value"), __STACKTRACE__
    end

    defp encode_can_update_metadata({acc, acc_size}, msg) do
      if msg.can_update_metadata == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.can_update_metadata)
        {["P", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:can_update_metadata, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_can_publish_sources({acc, acc_size}, msg) do
      case msg.can_publish_sources do
        [] ->
          {acc, acc_size}

        values ->
          {packed_bytes, packed_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} =
                    value |> LivekitProtocolEx.TrackSource.encode() |> Protox.Encode.encode_enum()

                  {[value_bytes | local_acc], local_acc_size + value_bytes_size}
                end)

              {value_size_bytes, value_size_size} = Protox.Varint.encode(value_size)
              {[value_size_bytes, Enum.reverse(value_bytes)], value_size + value_size_size}
            )

          {["J", packed_bytes | acc], acc_size + 1 + packed_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:can_publish_sources, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_recorder({acc, acc_size}, msg) do
      if msg.recorder == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.recorder)
        {["@", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:recorder, "invalid field value"), __STACKTRACE__
    end

    defp encode_hidden({acc, acc_size}, msg) do
      if msg.hidden == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.hidden)
        {["8", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:hidden, "invalid field value"), __STACKTRACE__
    end

    defp encode_can_publish_data({acc, acc_size}, msg) do
      if msg.can_publish_data == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.can_publish_data)
        {["\x18", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:can_publish_data, "invalid field value"), __STACKTRACE__
    end

    defp encode_can_publish({acc, acc_size}, msg) do
      if msg.can_publish == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.can_publish)
        {["\x10", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:can_publish, "invalid field value"), __STACKTRACE__
    end

    defp encode_can_subscribe({acc, acc_size}, msg) do
      if msg.can_subscribe == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.can_subscribe)
        {["\b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:can_subscribe, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.ParticipantPermission))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[can_subscribe_metrics: value], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[agent: value], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[can_update_metadata: value], rest}

            <<"J", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 can_publish_sources:
                   msg.can_publish_sources ++
                     Protox.Decode.parse_repeated_enum(
                       [],
                       delimited,
                       LivekitProtocolEx.TrackSource
                     )
               ], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.TrackSource)
              {[can_publish_sources: msg.can_publish_sources ++ [value]], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[recorder: value], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[hidden: value], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[can_publish_data: value], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[can_publish: value], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[can_subscribe: value], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:can_subscribe_metrics) do
      {:ok, false}
    end

    def default(:agent) do
      {:ok, false}
    end

    def default(:can_update_metadata) do
      {:ok, false}
    end

    def default(:can_publish_sources) do
      {:error, :no_default_value}
    end

    def default(:recorder) do
      {:ok, false}
    end

    def default(:hidden) do
      {:ok, false}
    end

    def default(:can_publish_data) do
      {:ok, false}
    end

    def default(:can_publish) do
      {:ok, false}
    end

    def default(:can_subscribe) do
      {:ok, false}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        agent: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :agent,
          tag: 11,
          type: :bool
        },
        can_publish: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :can_publish,
          tag: 2,
          type: :bool
        },
        can_publish_data: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :can_publish_data,
          tag: 3,
          type: :bool
        },
        can_publish_sources: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :packed,
          label: :repeated,
          name: :can_publish_sources,
          tag: 9,
          type: {:enum, LivekitProtocolEx.TrackSource}
        },
        can_subscribe: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :can_subscribe,
          tag: 1,
          type: :bool
        },
        can_subscribe_metrics: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :can_subscribe_metrics,
          tag: 12,
          type: :bool
        },
        can_update_metadata: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :can_update_metadata,
          tag: 10,
          type: :bool
        },
        hidden: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :hidden,
          tag: 7,
          type: :bool
        },
        recorder: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :recorder,
          tag: 8,
          type: :bool
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.ParticipantPermission,
      syntax: :proto3
    }
  end
end
