# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.S3Upload do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          assume_role_external_id: String.t(),
          assume_role_arn: String.t(),
          session_token: String.t(),
          proxy: LivekitProtocolEx.ProxyConfig.t() | nil,
          content_disposition: String.t(),
          tagging: String.t(),
          metadata: %{String.t() => String.t()},
          force_path_style: boolean(),
          bucket: String.t(),
          endpoint: String.t(),
          region: String.t(),
          secret: String.t(),
          access_key: String.t(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct assume_role_external_id: "",
            assume_role_arn: "",
            session_token: "",
            proxy: nil,
            content_disposition: "",
            tagging: "",
            metadata: %{},
            force_path_style: false,
            bucket: "",
            endpoint: "",
            region: "",
            secret: "",
            access_key: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_assume_role_external_id(msg)
        |> encode_assume_role_arn(msg)
        |> encode_session_token(msg)
        |> encode_proxy(msg)
        |> encode_content_disposition(msg)
        |> encode_tagging(msg)
        |> encode_metadata(msg)
        |> encode_force_path_style(msg)
        |> encode_bucket(msg)
        |> encode_endpoint(msg)
        |> encode_region(msg)
        |> encode_secret(msg)
        |> encode_access_key(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_assume_role_external_id({acc, acc_size}, msg) do
      if msg.assume_role_external_id == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.assume_role_external_id)
        {["j", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:assume_role_external_id, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_assume_role_arn({acc, acc_size}, msg) do
      if msg.assume_role_arn == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.assume_role_arn)
        {["b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:assume_role_arn, "invalid field value"), __STACKTRACE__
    end

    defp encode_session_token({acc, acc_size}, msg) do
      if msg.session_token == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.session_token)
        {["Z", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:session_token, "invalid field value"), __STACKTRACE__
    end

    defp encode_proxy({acc, acc_size}, msg) do
      if msg.proxy == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.proxy)
        {["R", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:proxy, "invalid field value"), __STACKTRACE__
    end

    defp encode_content_disposition({acc, acc_size}, msg) do
      if msg.content_disposition == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.content_disposition)
        {["J", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:content_disposition, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_tagging({acc, acc_size}, msg) do
      if msg.tagging == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.tagging)
        {["B", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:tagging, "invalid field value"), __STACKTRACE__
    end

    defp encode_metadata({acc, acc_size}, msg) do
      map = Map.fetch!(msg, :metadata)

      if map_size(map) == 0 do
        {acc, acc_size}
      else
        Enum.reduce(map, {acc, acc_size}, fn {k, v}, {acc, acc_size} ->
          {k_value_bytes, k_value_len} = Protox.Encode.encode_string(k)
          {v_value_bytes, v_value_len} = Protox.Encode.encode_string(v)
          len = 2 + k_value_len + v_value_len
          {len_varint, len_varint_size} = Protox.Varint.encode(len)
          acc = [<<":", len_varint::binary, "\n">>, k_value_bytes, "\x12", v_value_bytes | acc]
          {acc, acc_size + 3 + k_value_len + v_value_len + len_varint_size}
        end)
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:metadata, "invalid field value"), __STACKTRACE__
    end

    defp encode_force_path_style({acc, acc_size}, msg) do
      if msg.force_path_style == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.force_path_style)
        {["0", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:force_path_style, "invalid field value"), __STACKTRACE__
    end

    defp encode_bucket({acc, acc_size}, msg) do
      if msg.bucket == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.bucket)
        {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:bucket, "invalid field value"), __STACKTRACE__
    end

    defp encode_endpoint({acc, acc_size}, msg) do
      if msg.endpoint == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.endpoint)
        {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:endpoint, "invalid field value"), __STACKTRACE__
    end

    defp encode_region({acc, acc_size}, msg) do
      if msg.region == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.region)
        {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:region, "invalid field value"), __STACKTRACE__
    end

    defp encode_secret({acc, acc_size}, msg) do
      if msg.secret == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.secret)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:secret, "invalid field value"), __STACKTRACE__
    end

    defp encode_access_key({acc, acc_size}, msg) do
      if msg.access_key == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.access_key)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:access_key, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.S3Upload))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[assume_role_external_id: Protox.Decode.validate_string!(delimited)], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[assume_role_arn: Protox.Decode.validate_string!(delimited)], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[session_token: Protox.Decode.validate_string!(delimited)], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 proxy:
                   Protox.MergeMessage.merge(
                     msg.proxy,
                     LivekitProtocolEx.ProxyConfig.decode!(delimited)
                   )
               ], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[content_disposition: Protox.Decode.validate_string!(delimited)], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[tagging: Protox.Decode.validate_string!(delimited)], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 (
                   {entry_key, entry_value} =
                     (
                       {map_key, map_value} = parse_string_string({:unset, :unset}, delimited)

                       map_key =
                         case map_key do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_key
                         end

                       map_value =
                         case map_value do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_value
                         end

                       {map_key, map_value}
                     )

                   {:metadata, Map.put(msg.metadata, entry_key, entry_value)}
                 )
               ], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[force_path_style: value], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[bucket: Protox.Decode.validate_string!(delimited)], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[endpoint: Protox.Decode.validate_string!(delimited)], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[region: Protox.Decode.validate_string!(delimited)], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[secret: Protox.Decode.validate_string!(delimited)], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[access_key: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )

    (
      defp parse_string_string(map_entry, <<>>) do
        map_entry
      end

      defp parse_string_string({entry_key, entry_value}, bytes) do
        {map_entry, rest} =
          case Protox.Decode.parse_key(bytes) do
            {1, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{res, entry_value}, rest}

            {2, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{entry_key, res}, rest}

            {tag, wire_type, rest} ->
              {_, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {{entry_key, entry_value}, rest}
          end

        parse_string_string(map_entry, rest)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:assume_role_external_id) do
      {:ok, ""}
    end

    def default(:assume_role_arn) do
      {:ok, ""}
    end

    def default(:session_token) do
      {:ok, ""}
    end

    def default(:proxy) do
      {:ok, nil}
    end

    def default(:content_disposition) do
      {:ok, ""}
    end

    def default(:tagging) do
      {:ok, ""}
    end

    def default(:metadata) do
      {:error, :no_default_value}
    end

    def default(:force_path_style) do
      {:ok, false}
    end

    def default(:bucket) do
      {:ok, ""}
    end

    def default(:endpoint) do
      {:ok, ""}
    end

    def default(:region) do
      {:ok, ""}
    end

    def default(:secret) do
      {:ok, ""}
    end

    def default(:access_key) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        access_key: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :access_key,
          tag: 1,
          type: :string
        },
        assume_role_arn: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :assume_role_arn,
          tag: 12,
          type: :string
        },
        assume_role_external_id: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :assume_role_external_id,
          tag: 13,
          type: :string
        },
        bucket: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :bucket,
          tag: 5,
          type: :string
        },
        content_disposition: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :content_disposition,
          tag: 9,
          type: :string
        },
        endpoint: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :endpoint,
          tag: 4,
          type: :string
        },
        force_path_style: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :force_path_style,
          tag: 6,
          type: :bool
        },
        metadata: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :map,
          label: nil,
          name: :metadata,
          tag: 7,
          type: {:string, :string}
        },
        proxy: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :proxy,
          tag: 10,
          type: {:message, LivekitProtocolEx.ProxyConfig}
        },
        region: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :region,
          tag: 3,
          type: :string
        },
        secret: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :secret,
          tag: 2,
          type: :string
        },
        session_token: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :session_token,
          tag: 11,
          type: :string
        },
        tagging: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :tagging,
          tag: 8,
          type: :string
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.S3Upload,
      syntax: :proto3
    }
  end
end
