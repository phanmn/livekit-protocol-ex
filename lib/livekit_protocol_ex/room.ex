# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.Room do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          creation_time_ms: integer(),
          departure_timeout: non_neg_integer(),
          version: LivekitProtocolEx.TimedVersion.t() | nil,
          num_publishers: non_neg_integer(),
          active_recording: boolean(),
          num_participants: non_neg_integer(),
          metadata: String.t(),
          enabled_codecs: [LivekitProtocolEx.Codec.t()],
          turn_password: String.t(),
          creation_time: integer(),
          max_participants: non_neg_integer(),
          empty_timeout: non_neg_integer(),
          name: String.t(),
          sid: String.t(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct creation_time_ms: 0,
            departure_timeout: 0,
            version: nil,
            num_publishers: 0,
            active_recording: false,
            num_participants: 0,
            metadata: "",
            enabled_codecs: [],
            turn_password: "",
            creation_time: 0,
            max_participants: 0,
            empty_timeout: 0,
            name: "",
            sid: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_creation_time_ms(msg)
        |> encode_departure_timeout(msg)
        |> encode_version(msg)
        |> encode_num_publishers(msg)
        |> encode_active_recording(msg)
        |> encode_num_participants(msg)
        |> encode_metadata(msg)
        |> encode_enabled_codecs(msg)
        |> encode_turn_password(msg)
        |> encode_creation_time(msg)
        |> encode_max_participants(msg)
        |> encode_empty_timeout(msg)
        |> encode_name(msg)
        |> encode_sid(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_creation_time_ms({acc, acc_size}, msg) do
      if msg.creation_time_ms == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.creation_time_ms)
        {["x", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:creation_time_ms, "invalid field value"), __STACKTRACE__
    end

    defp encode_departure_timeout({acc, acc_size}, msg) do
      if msg.departure_timeout == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.departure_timeout)
        {["p", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:departure_timeout, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_version({acc, acc_size}, msg) do
      if msg.version == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.version)
        {["j", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:version, "invalid field value"), __STACKTRACE__
    end

    defp encode_num_publishers({acc, acc_size}, msg) do
      if msg.num_publishers == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.num_publishers)
        {["X", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:num_publishers, "invalid field value"), __STACKTRACE__
    end

    defp encode_active_recording({acc, acc_size}, msg) do
      if msg.active_recording == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.active_recording)
        {["P", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:active_recording, "invalid field value"), __STACKTRACE__
    end

    defp encode_num_participants({acc, acc_size}, msg) do
      if msg.num_participants == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.num_participants)
        {["H", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:num_participants, "invalid field value"), __STACKTRACE__
    end

    defp encode_metadata({acc, acc_size}, msg) do
      if msg.metadata == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.metadata)
        {["B", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:metadata, "invalid field value"), __STACKTRACE__
    end

    defp encode_enabled_codecs({acc, acc_size}, msg) do
      case msg.enabled_codecs do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, ":" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:enabled_codecs, "invalid field value"), __STACKTRACE__
    end

    defp encode_turn_password({acc, acc_size}, msg) do
      if msg.turn_password == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.turn_password)
        {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:turn_password, "invalid field value"), __STACKTRACE__
    end

    defp encode_creation_time({acc, acc_size}, msg) do
      if msg.creation_time == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.creation_time)
        {["(", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:creation_time, "invalid field value"), __STACKTRACE__
    end

    defp encode_max_participants({acc, acc_size}, msg) do
      if msg.max_participants == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.max_participants)
        {[" ", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:max_participants, "invalid field value"), __STACKTRACE__
    end

    defp encode_empty_timeout({acc, acc_size}, msg) do
      if msg.empty_timeout == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.empty_timeout)
        {["\x18", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:empty_timeout, "invalid field value"), __STACKTRACE__
    end

    defp encode_name({acc, acc_size}, msg) do
      if msg.name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.name)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:name, "invalid field value"), __STACKTRACE__
    end

    defp encode_sid({acc, acc_size}, msg) do
      if msg.sid == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.sid)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:sid, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.Room))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[creation_time_ms: value], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[departure_timeout: value], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 version:
                   Protox.MergeMessage.merge(
                     msg.version,
                     LivekitProtocolEx.TimedVersion.decode!(delimited)
                   )
               ], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[num_publishers: value], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[active_recording: value], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[num_participants: value], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[metadata: Protox.Decode.validate_string!(delimited)], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 enabled_codecs:
                   msg.enabled_codecs ++ [LivekitProtocolEx.Codec.decode!(delimited)]
               ], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[turn_password: Protox.Decode.validate_string!(delimited)], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[creation_time: value], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[max_participants: value], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[empty_timeout: value], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[name: Protox.Decode.validate_string!(delimited)], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[sid: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:creation_time_ms) do
      {:ok, 0}
    end

    def default(:departure_timeout) do
      {:ok, 0}
    end

    def default(:version) do
      {:ok, nil}
    end

    def default(:num_publishers) do
      {:ok, 0}
    end

    def default(:active_recording) do
      {:ok, false}
    end

    def default(:num_participants) do
      {:ok, 0}
    end

    def default(:metadata) do
      {:ok, ""}
    end

    def default(:enabled_codecs) do
      {:error, :no_default_value}
    end

    def default(:turn_password) do
      {:ok, ""}
    end

    def default(:creation_time) do
      {:ok, 0}
    end

    def default(:max_participants) do
      {:ok, 0}
    end

    def default(:empty_timeout) do
      {:ok, 0}
    end

    def default(:name) do
      {:ok, ""}
    end

    def default(:sid) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        active_recording: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :active_recording,
          tag: 10,
          type: :bool
        },
        creation_time: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :creation_time,
          tag: 5,
          type: :int64
        },
        creation_time_ms: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :creation_time_ms,
          tag: 15,
          type: :int64
        },
        departure_timeout: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :departure_timeout,
          tag: 14,
          type: :uint32
        },
        empty_timeout: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :empty_timeout,
          tag: 3,
          type: :uint32
        },
        enabled_codecs: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :enabled_codecs,
          tag: 7,
          type: {:message, LivekitProtocolEx.Codec}
        },
        max_participants: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :max_participants,
          tag: 4,
          type: :uint32
        },
        metadata: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :metadata,
          tag: 8,
          type: :string
        },
        name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :name,
          tag: 2,
          type: :string
        },
        num_participants: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :num_participants,
          tag: 9,
          type: :uint32
        },
        num_publishers: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :num_publishers,
          tag: 11,
          type: :uint32
        },
        sid: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :sid,
          tag: 1,
          type: :string
        },
        turn_password: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :turn_password,
          tag: 6,
          type: :string
        },
        version: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :version,
          tag: 13,
          type: {:message, LivekitProtocolEx.TimedVersion}
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.Room,
      syntax: :proto3
    }
  end
end
