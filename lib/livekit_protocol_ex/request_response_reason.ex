# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.RequestResponse.Reason do
  @moduledoc false
  @type t :: %__MODULE__{}
  defstruct []

  (
    @spec default() :: :OK
    def default() do
      :OK
    end
  )

  @spec encode(atom() | String.t()) :: integer() | atom()
  def encode(:OK) do
    0
  end

  def encode(:NOT_FOUND) do
    1
  end

  def encode(:NOT_ALLOWED) do
    2
  end

  def encode(:LIMIT_EXCEEDED) do
    3
  end

  def encode(:QUEUED) do
    4
  end

  def encode(:UNSUPPORTED_TYPE) do
    5
  end

  def encode(:UNCLASSIFIED_ERROR) do
    6
  end

  def encode(x) do
    x
  end

  @spec decode(integer()) :: atom() | integer()
  def decode(0) do
    :OK
  end

  def decode(1) do
    :NOT_FOUND
  end

  def decode(2) do
    :NOT_ALLOWED
  end

  def decode(3) do
    :LIMIT_EXCEEDED
  end

  def decode(4) do
    :QUEUED
  end

  def decode(5) do
    :UNSUPPORTED_TYPE
  end

  def decode(6) do
    :UNCLASSIFIED_ERROR
  end

  def decode(x) do
    x
  end

  @spec constants() :: [{integer(), atom()}]
  def constants() do
    [
      {0, :OK},
      {1, :NOT_FOUND},
      {2, :NOT_ALLOWED},
      {3, :LIMIT_EXCEEDED},
      {4, :QUEUED},
      {5, :UNSUPPORTED_TYPE},
      {6, :UNCLASSIFIED_ERROR}
    ]
  end

  @spec has_constant?(any()) :: boolean()
  (
    def has_constant?(:OK) do
      true
    end

    def has_constant?(:NOT_FOUND) do
      true
    end

    def has_constant?(:NOT_ALLOWED) do
      true
    end

    def has_constant?(:LIMIT_EXCEEDED) do
      true
    end

    def has_constant?(:QUEUED) do
      true
    end

    def has_constant?(:UNSUPPORTED_TYPE) do
      true
    end

    def has_constant?(:UNCLASSIFIED_ERROR) do
      true
    end

    def has_constant?(_) do
      false
    end
  )
end
