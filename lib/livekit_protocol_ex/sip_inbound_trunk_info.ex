# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.SIPInboundTrunkInfo do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          media_encryption: atom(),
          include_headers: atom(),
          attributes_to_headers: %{String.t() => String.t()},
          krisp_enabled: boolean(),
          max_call_duration: Google.Protobuf.Duration.t() | nil,
          ringing_timeout: Google.Protobuf.Duration.t() | nil,
          headers_to_attributes: %{String.t() => String.t()},
          headers: %{String.t() => String.t()},
          auth_password: String.t(),
          auth_username: String.t(),
          allowed_numbers: [String.t()],
          allowed_addresses: [String.t()],
          numbers: [String.t()],
          metadata: String.t(),
          name: String.t(),
          sip_trunk_id: String.t(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct media_encryption: :SIP_MEDIA_ENCRYPT_DISABLE,
            include_headers: :SIP_NO_HEADERS,
            attributes_to_headers: %{},
            krisp_enabled: false,
            max_call_duration: nil,
            ringing_timeout: nil,
            headers_to_attributes: %{},
            headers: %{},
            auth_password: "",
            auth_username: "",
            allowed_numbers: [],
            allowed_addresses: [],
            numbers: [],
            metadata: "",
            name: "",
            sip_trunk_id: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_media_encryption(msg)
        |> encode_include_headers(msg)
        |> encode_attributes_to_headers(msg)
        |> encode_krisp_enabled(msg)
        |> encode_max_call_duration(msg)
        |> encode_ringing_timeout(msg)
        |> encode_headers_to_attributes(msg)
        |> encode_headers(msg)
        |> encode_auth_password(msg)
        |> encode_auth_username(msg)
        |> encode_allowed_numbers(msg)
        |> encode_allowed_addresses(msg)
        |> encode_numbers(msg)
        |> encode_metadata(msg)
        |> encode_name(msg)
        |> encode_sip_trunk_id(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_media_encryption({acc, acc_size}, msg) do
      if msg.media_encryption == :SIP_MEDIA_ENCRYPT_DISABLE do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.media_encryption
          |> LivekitProtocolEx.SIPMediaEncryption.encode()
          |> Protox.Encode.encode_enum()

        {["\x80\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:media_encryption, "invalid field value"), __STACKTRACE__
    end

    defp encode_include_headers({acc, acc_size}, msg) do
      if msg.include_headers == :SIP_NO_HEADERS do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.include_headers
          |> LivekitProtocolEx.SIPHeaderOptions.encode()
          |> Protox.Encode.encode_enum()

        {["x", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:include_headers, "invalid field value"), __STACKTRACE__
    end

    defp encode_attributes_to_headers({acc, acc_size}, msg) do
      map = Map.fetch!(msg, :attributes_to_headers)

      if map_size(map) == 0 do
        {acc, acc_size}
      else
        Enum.reduce(map, {acc, acc_size}, fn {k, v}, {acc, acc_size} ->
          {k_value_bytes, k_value_len} = Protox.Encode.encode_string(k)
          {v_value_bytes, v_value_len} = Protox.Encode.encode_string(v)
          len = 2 + k_value_len + v_value_len
          {len_varint, len_varint_size} = Protox.Varint.encode(len)
          acc = [<<"r", len_varint::binary, "\n">>, k_value_bytes, "\x12", v_value_bytes | acc]
          {acc, acc_size + 3 + k_value_len + v_value_len + len_varint_size}
        end)
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:attributes_to_headers, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_krisp_enabled({acc, acc_size}, msg) do
      if msg.krisp_enabled == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.krisp_enabled)
        {["h", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:krisp_enabled, "invalid field value"), __STACKTRACE__
    end

    defp encode_max_call_duration({acc, acc_size}, msg) do
      if msg.max_call_duration == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.max_call_duration)
        {["b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:max_call_duration, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_ringing_timeout({acc, acc_size}, msg) do
      if msg.ringing_timeout == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.ringing_timeout)
        {["Z", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ringing_timeout, "invalid field value"), __STACKTRACE__
    end

    defp encode_headers_to_attributes({acc, acc_size}, msg) do
      map = Map.fetch!(msg, :headers_to_attributes)

      if map_size(map) == 0 do
        {acc, acc_size}
      else
        Enum.reduce(map, {acc, acc_size}, fn {k, v}, {acc, acc_size} ->
          {k_value_bytes, k_value_len} = Protox.Encode.encode_string(k)
          {v_value_bytes, v_value_len} = Protox.Encode.encode_string(v)
          len = 2 + k_value_len + v_value_len
          {len_varint, len_varint_size} = Protox.Varint.encode(len)
          acc = [<<"R", len_varint::binary, "\n">>, k_value_bytes, "\x12", v_value_bytes | acc]
          {acc, acc_size + 3 + k_value_len + v_value_len + len_varint_size}
        end)
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:headers_to_attributes, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_headers({acc, acc_size}, msg) do
      map = Map.fetch!(msg, :headers)

      if map_size(map) == 0 do
        {acc, acc_size}
      else
        Enum.reduce(map, {acc, acc_size}, fn {k, v}, {acc, acc_size} ->
          {k_value_bytes, k_value_len} = Protox.Encode.encode_string(k)
          {v_value_bytes, v_value_len} = Protox.Encode.encode_string(v)
          len = 2 + k_value_len + v_value_len
          {len_varint, len_varint_size} = Protox.Varint.encode(len)
          acc = [<<"J", len_varint::binary, "\n">>, k_value_bytes, "\x12", v_value_bytes | acc]
          {acc, acc_size + 3 + k_value_len + v_value_len + len_varint_size}
        end)
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:headers, "invalid field value"), __STACKTRACE__
    end

    defp encode_auth_password({acc, acc_size}, msg) do
      if msg.auth_password == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.auth_password)
        {["B", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:auth_password, "invalid field value"), __STACKTRACE__
    end

    defp encode_auth_username({acc, acc_size}, msg) do
      if msg.auth_username == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.auth_username)
        {[":", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:auth_username, "invalid field value"), __STACKTRACE__
    end

    defp encode_allowed_numbers({acc, acc_size}, msg) do
      case msg.allowed_numbers do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_string(value)
                  {[value_bytes, "2" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:allowed_numbers, "invalid field value"), __STACKTRACE__
    end

    defp encode_allowed_addresses({acc, acc_size}, msg) do
      case msg.allowed_addresses do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_string(value)
                  {[value_bytes, "*" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:allowed_addresses, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_numbers({acc, acc_size}, msg) do
      case msg.numbers do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_string(value)
                  {[value_bytes, "\"" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:numbers, "invalid field value"), __STACKTRACE__
    end

    defp encode_metadata({acc, acc_size}, msg) do
      if msg.metadata == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.metadata)
        {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:metadata, "invalid field value"), __STACKTRACE__
    end

    defp encode_name({acc, acc_size}, msg) do
      if msg.name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.name)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:name, "invalid field value"), __STACKTRACE__
    end

    defp encode_sip_trunk_id({acc, acc_size}, msg) do
      if msg.sip_trunk_id == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.sip_trunk_id)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:sip_trunk_id, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.SIPInboundTrunkInfo))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} =
                Protox.Decode.parse_enum(bytes, LivekitProtocolEx.SIPMediaEncryption)

              {[media_encryption: value], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.SIPHeaderOptions)
              {[include_headers: value], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 (
                   {entry_key, entry_value} =
                     (
                       {map_key, map_value} = parse_string_string({:unset, :unset}, delimited)

                       map_key =
                         case map_key do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_key
                         end

                       map_value =
                         case map_value do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_value
                         end

                       {map_key, map_value}
                     )

                   {:attributes_to_headers,
                    Map.put(msg.attributes_to_headers, entry_key, entry_value)}
                 )
               ], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[krisp_enabled: value], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 max_call_duration:
                   Protox.MergeMessage.merge(
                     msg.max_call_duration,
                     Google.Protobuf.Duration.decode!(delimited)
                   )
               ], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 ringing_timeout:
                   Protox.MergeMessage.merge(
                     msg.ringing_timeout,
                     Google.Protobuf.Duration.decode!(delimited)
                   )
               ], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 (
                   {entry_key, entry_value} =
                     (
                       {map_key, map_value} = parse_string_string({:unset, :unset}, delimited)

                       map_key =
                         case map_key do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_key
                         end

                       map_value =
                         case map_value do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_value
                         end

                       {map_key, map_value}
                     )

                   {:headers_to_attributes,
                    Map.put(msg.headers_to_attributes, entry_key, entry_value)}
                 )
               ], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 (
                   {entry_key, entry_value} =
                     (
                       {map_key, map_value} = parse_string_string({:unset, :unset}, delimited)

                       map_key =
                         case map_key do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_key
                         end

                       map_value =
                         case map_value do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_value
                         end

                       {map_key, map_value}
                     )

                   {:headers, Map.put(msg.headers, entry_key, entry_value)}
                 )
               ], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[auth_password: Protox.Decode.validate_string!(delimited)], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[auth_username: Protox.Decode.validate_string!(delimited)], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 allowed_numbers:
                   msg.allowed_numbers ++ [Protox.Decode.validate_string!(delimited)]
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 allowed_addresses:
                   msg.allowed_addresses ++ [Protox.Decode.validate_string!(delimited)]
               ], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[numbers: msg.numbers ++ [Protox.Decode.validate_string!(delimited)]], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[metadata: Protox.Decode.validate_string!(delimited)], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[name: Protox.Decode.validate_string!(delimited)], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[sip_trunk_id: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )

    (
      defp parse_string_string(map_entry, <<>>) do
        map_entry
      end

      defp parse_string_string({entry_key, entry_value}, bytes) do
        {map_entry, rest} =
          case Protox.Decode.parse_key(bytes) do
            {1, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{res, entry_value}, rest}

            {2, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{entry_key, res}, rest}

            {tag, wire_type, rest} ->
              {_, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {{entry_key, entry_value}, rest}
          end

        parse_string_string(map_entry, rest)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:media_encryption) do
      {:ok, :SIP_MEDIA_ENCRYPT_DISABLE}
    end

    def default(:include_headers) do
      {:ok, :SIP_NO_HEADERS}
    end

    def default(:attributes_to_headers) do
      {:error, :no_default_value}
    end

    def default(:krisp_enabled) do
      {:ok, false}
    end

    def default(:max_call_duration) do
      {:ok, nil}
    end

    def default(:ringing_timeout) do
      {:ok, nil}
    end

    def default(:headers_to_attributes) do
      {:error, :no_default_value}
    end

    def default(:headers) do
      {:error, :no_default_value}
    end

    def default(:auth_password) do
      {:ok, ""}
    end

    def default(:auth_username) do
      {:ok, ""}
    end

    def default(:allowed_numbers) do
      {:error, :no_default_value}
    end

    def default(:allowed_addresses) do
      {:error, :no_default_value}
    end

    def default(:numbers) do
      {:error, :no_default_value}
    end

    def default(:metadata) do
      {:ok, ""}
    end

    def default(:name) do
      {:ok, ""}
    end

    def default(:sip_trunk_id) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        allowed_addresses: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :allowed_addresses,
          tag: 5,
          type: :string
        },
        allowed_numbers: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :allowed_numbers,
          tag: 6,
          type: :string
        },
        attributes_to_headers: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :map,
          label: nil,
          name: :attributes_to_headers,
          tag: 14,
          type: {:string, :string}
        },
        auth_password: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :auth_password,
          tag: 8,
          type: :string
        },
        auth_username: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :auth_username,
          tag: 7,
          type: :string
        },
        headers: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :map,
          label: nil,
          name: :headers,
          tag: 9,
          type: {:string, :string}
        },
        headers_to_attributes: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :map,
          label: nil,
          name: :headers_to_attributes,
          tag: 10,
          type: {:string, :string}
        },
        include_headers: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :SIP_NO_HEADERS},
          label: :optional,
          name: :include_headers,
          tag: 15,
          type: {:enum, LivekitProtocolEx.SIPHeaderOptions}
        },
        krisp_enabled: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :krisp_enabled,
          tag: 13,
          type: :bool
        },
        max_call_duration: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :max_call_duration,
          tag: 12,
          type: {:message, Google.Protobuf.Duration}
        },
        media_encryption: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :SIP_MEDIA_ENCRYPT_DISABLE},
          label: :optional,
          name: :media_encryption,
          tag: 16,
          type: {:enum, LivekitProtocolEx.SIPMediaEncryption}
        },
        metadata: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :metadata,
          tag: 3,
          type: :string
        },
        name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :name,
          tag: 2,
          type: :string
        },
        numbers: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :numbers,
          tag: 4,
          type: :string
        },
        ringing_timeout: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :ringing_timeout,
          tag: 11,
          type: {:message, Google.Protobuf.Duration}
        },
        sip_trunk_id: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :sip_trunk_id,
          tag: 1,
          type: :string
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.SIPInboundTrunkInfo,
      syntax: :proto3
    }
  end
end
