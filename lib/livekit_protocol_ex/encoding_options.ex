# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.EncodingOptions do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          video_quality: integer(),
          audio_quality: integer(),
          key_frame_interval: float(),
          video_bitrate: integer(),
          video_codec: atom(),
          audio_frequency: integer(),
          audio_bitrate: integer(),
          audio_codec: atom(),
          framerate: integer(),
          depth: integer(),
          height: integer(),
          width: integer(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct video_quality: 0,
            audio_quality: 0,
            key_frame_interval: 0.0,
            video_bitrate: 0,
            video_codec: :DEFAULT_VC,
            audio_frequency: 0,
            audio_bitrate: 0,
            audio_codec: :DEFAULT_AC,
            framerate: 0,
            depth: 0,
            height: 0,
            width: 0,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_video_quality(msg)
        |> encode_audio_quality(msg)
        |> encode_key_frame_interval(msg)
        |> encode_video_bitrate(msg)
        |> encode_video_codec(msg)
        |> encode_audio_frequency(msg)
        |> encode_audio_bitrate(msg)
        |> encode_audio_codec(msg)
        |> encode_framerate(msg)
        |> encode_depth(msg)
        |> encode_height(msg)
        |> encode_width(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_video_quality({acc, acc_size}, msg) do
      if msg.video_quality == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.video_quality)
        {["`", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:video_quality, "invalid field value"), __STACKTRACE__
    end

    defp encode_audio_quality({acc, acc_size}, msg) do
      if msg.audio_quality == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.audio_quality)
        {["X", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:audio_quality, "invalid field value"), __STACKTRACE__
    end

    defp encode_key_frame_interval({acc, acc_size}, msg) do
      if msg.key_frame_interval == 0.0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_double(msg.key_frame_interval)
        {["Q", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:key_frame_interval, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_video_bitrate({acc, acc_size}, msg) do
      if msg.video_bitrate == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.video_bitrate)
        {["H", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:video_bitrate, "invalid field value"), __STACKTRACE__
    end

    defp encode_video_codec({acc, acc_size}, msg) do
      if msg.video_codec == :DEFAULT_VC do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.video_codec |> LivekitProtocolEx.VideoCodec.encode() |> Protox.Encode.encode_enum()

        {["@", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:video_codec, "invalid field value"), __STACKTRACE__
    end

    defp encode_audio_frequency({acc, acc_size}, msg) do
      if msg.audio_frequency == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.audio_frequency)
        {["8", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:audio_frequency, "invalid field value"), __STACKTRACE__
    end

    defp encode_audio_bitrate({acc, acc_size}, msg) do
      if msg.audio_bitrate == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.audio_bitrate)
        {["0", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:audio_bitrate, "invalid field value"), __STACKTRACE__
    end

    defp encode_audio_codec({acc, acc_size}, msg) do
      if msg.audio_codec == :DEFAULT_AC do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.audio_codec |> LivekitProtocolEx.AudioCodec.encode() |> Protox.Encode.encode_enum()

        {["(", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:audio_codec, "invalid field value"), __STACKTRACE__
    end

    defp encode_framerate({acc, acc_size}, msg) do
      if msg.framerate == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.framerate)
        {[" ", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:framerate, "invalid field value"), __STACKTRACE__
    end

    defp encode_depth({acc, acc_size}, msg) do
      if msg.depth == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.depth)
        {["\x18", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:depth, "invalid field value"), __STACKTRACE__
    end

    defp encode_height({acc, acc_size}, msg) do
      if msg.height == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.height)
        {["\x10", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:height, "invalid field value"), __STACKTRACE__
    end

    defp encode_width({acc, acc_size}, msg) do
      if msg.width == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.width)
        {["\b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:width, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.EncodingOptions))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[video_quality: value], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[audio_quality: value], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_double(bytes)
              {[key_frame_interval: value], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[video_bitrate: value], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.VideoCodec)
              {[video_codec: value], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[audio_frequency: value], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[audio_bitrate: value], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.AudioCodec)
              {[audio_codec: value], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[framerate: value], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[depth: value], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[height: value], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[width: value], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:video_quality) do
      {:ok, 0}
    end

    def default(:audio_quality) do
      {:ok, 0}
    end

    def default(:key_frame_interval) do
      {:ok, 0.0}
    end

    def default(:video_bitrate) do
      {:ok, 0}
    end

    def default(:video_codec) do
      {:ok, :DEFAULT_VC}
    end

    def default(:audio_frequency) do
      {:ok, 0}
    end

    def default(:audio_bitrate) do
      {:ok, 0}
    end

    def default(:audio_codec) do
      {:ok, :DEFAULT_AC}
    end

    def default(:framerate) do
      {:ok, 0}
    end

    def default(:depth) do
      {:ok, 0}
    end

    def default(:height) do
      {:ok, 0}
    end

    def default(:width) do
      {:ok, 0}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        audio_bitrate: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :audio_bitrate,
          tag: 6,
          type: :int32
        },
        audio_codec: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :DEFAULT_AC},
          label: :optional,
          name: :audio_codec,
          tag: 5,
          type: {:enum, LivekitProtocolEx.AudioCodec}
        },
        audio_frequency: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :audio_frequency,
          tag: 7,
          type: :int32
        },
        audio_quality: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :audio_quality,
          tag: 11,
          type: :int32
        },
        depth: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :depth,
          tag: 3,
          type: :int32
        },
        framerate: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :framerate,
          tag: 4,
          type: :int32
        },
        height: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :height,
          tag: 2,
          type: :int32
        },
        key_frame_interval: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0.0},
          label: :optional,
          name: :key_frame_interval,
          tag: 10,
          type: :double
        },
        video_bitrate: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :video_bitrate,
          tag: 9,
          type: :int32
        },
        video_codec: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :DEFAULT_VC},
          label: :optional,
          name: :video_codec,
          tag: 8,
          type: {:enum, LivekitProtocolEx.VideoCodec}
        },
        video_quality: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :video_quality,
          tag: 12,
          type: :int32
        },
        width: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :width,
          tag: 1,
          type: :int32
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.EncodingOptions,
      syntax: :proto3
    }
  end
end
