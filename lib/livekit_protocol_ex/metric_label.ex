# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.MetricLabel do
  @moduledoc false
  @type t :: %__MODULE__{}
  defstruct []

  (
    @spec default() :: :AGENTS_LLM_TTFT
    def default() do
      :AGENTS_LLM_TTFT
    end
  )

  @spec encode(atom() | String.t()) :: integer() | atom()
  def encode(:AGENTS_LLM_TTFT) do
    0
  end

  def encode(:AGENTS_STT_TTFT) do
    1
  end

  def encode(:AGENTS_TTS_TTFB) do
    2
  end

  def encode(:CLIENT_VIDEO_SUBSCRIBER_FREEZE_COUNT) do
    3
  end

  def encode(:CLIENT_VIDEO_SUBSCRIBER_TOTAL_FREEZE_DURATION) do
    4
  end

  def encode(:CLIENT_VIDEO_SUBSCRIBER_PAUSE_COUNT) do
    5
  end

  def encode(:CLIENT_VIDEO_SUBSCRIBER_TOTAL_PAUSES_DURATION) do
    6
  end

  def encode(:CLIENT_AUDIO_SUBSCRIBER_CONCEALED_SAMPLES) do
    7
  end

  def encode(:CLIENT_AUDIO_SUBSCRIBER_SILENT_CONCEALED_SAMPLES) do
    8
  end

  def encode(:CLIENT_AUDIO_SUBSCRIBER_CONCEALMENT_EVENTS) do
    9
  end

  def encode(:CLIENT_AUDIO_SUBSCRIBER_INTERRUPTION_COUNT) do
    10
  end

  def encode(:CLIENT_AUDIO_SUBSCRIBER_TOTAL_INTERRUPTION_DURATION) do
    11
  end

  def encode(:CLIENT_SUBSCRIBER_JITTER_BUFFER_DELAY) do
    12
  end

  def encode(:CLIENT_SUBSCRIBER_JITTER_BUFFER_EMITTED_COUNT) do
    13
  end

  def encode(:CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_BANDWIDTH) do
    14
  end

  def encode(:CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_CPU) do
    15
  end

  def encode(:CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_OTHER) do
    16
  end

  def encode(:PUBLISHER_RTT) do
    17
  end

  def encode(:SERVER_MESH_RTT) do
    18
  end

  def encode(:SUBSCRIBER_RTT) do
    19
  end

  def encode(:METRIC_LABEL_PREDEFINED_MAX_VALUE) do
    4096
  end

  def encode(x) do
    x
  end

  @spec decode(integer()) :: atom() | integer()
  def decode(0) do
    :AGENTS_LLM_TTFT
  end

  def decode(1) do
    :AGENTS_STT_TTFT
  end

  def decode(2) do
    :AGENTS_TTS_TTFB
  end

  def decode(3) do
    :CLIENT_VIDEO_SUBSCRIBER_FREEZE_COUNT
  end

  def decode(4) do
    :CLIENT_VIDEO_SUBSCRIBER_TOTAL_FREEZE_DURATION
  end

  def decode(5) do
    :CLIENT_VIDEO_SUBSCRIBER_PAUSE_COUNT
  end

  def decode(6) do
    :CLIENT_VIDEO_SUBSCRIBER_TOTAL_PAUSES_DURATION
  end

  def decode(7) do
    :CLIENT_AUDIO_SUBSCRIBER_CONCEALED_SAMPLES
  end

  def decode(8) do
    :CLIENT_AUDIO_SUBSCRIBER_SILENT_CONCEALED_SAMPLES
  end

  def decode(9) do
    :CLIENT_AUDIO_SUBSCRIBER_CONCEALMENT_EVENTS
  end

  def decode(10) do
    :CLIENT_AUDIO_SUBSCRIBER_INTERRUPTION_COUNT
  end

  def decode(11) do
    :CLIENT_AUDIO_SUBSCRIBER_TOTAL_INTERRUPTION_DURATION
  end

  def decode(12) do
    :CLIENT_SUBSCRIBER_JITTER_BUFFER_DELAY
  end

  def decode(13) do
    :CLIENT_SUBSCRIBER_JITTER_BUFFER_EMITTED_COUNT
  end

  def decode(14) do
    :CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_BANDWIDTH
  end

  def decode(15) do
    :CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_CPU
  end

  def decode(16) do
    :CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_OTHER
  end

  def decode(17) do
    :PUBLISHER_RTT
  end

  def decode(18) do
    :SERVER_MESH_RTT
  end

  def decode(19) do
    :SUBSCRIBER_RTT
  end

  def decode(4096) do
    :METRIC_LABEL_PREDEFINED_MAX_VALUE
  end

  def decode(x) do
    x
  end

  @spec constants() :: [{integer(), atom()}]
  def constants() do
    [
      {0, :AGENTS_LLM_TTFT},
      {1, :AGENTS_STT_TTFT},
      {2, :AGENTS_TTS_TTFB},
      {3, :CLIENT_VIDEO_SUBSCRIBER_FREEZE_COUNT},
      {4, :CLIENT_VIDEO_SUBSCRIBER_TOTAL_FREEZE_DURATION},
      {5, :CLIENT_VIDEO_SUBSCRIBER_PAUSE_COUNT},
      {6, :CLIENT_VIDEO_SUBSCRIBER_TOTAL_PAUSES_DURATION},
      {7, :CLIENT_AUDIO_SUBSCRIBER_CONCEALED_SAMPLES},
      {8, :CLIENT_AUDIO_SUBSCRIBER_SILENT_CONCEALED_SAMPLES},
      {9, :CLIENT_AUDIO_SUBSCRIBER_CONCEALMENT_EVENTS},
      {10, :CLIENT_AUDIO_SUBSCRIBER_INTERRUPTION_COUNT},
      {11, :CLIENT_AUDIO_SUBSCRIBER_TOTAL_INTERRUPTION_DURATION},
      {12, :CLIENT_SUBSCRIBER_JITTER_BUFFER_DELAY},
      {13, :CLIENT_SUBSCRIBER_JITTER_BUFFER_EMITTED_COUNT},
      {14, :CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_BANDWIDTH},
      {15, :CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_CPU},
      {16, :CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_OTHER},
      {17, :PUBLISHER_RTT},
      {18, :SERVER_MESH_RTT},
      {19, :SUBSCRIBER_RTT},
      {4096, :METRIC_LABEL_PREDEFINED_MAX_VALUE}
    ]
  end

  @spec has_constant?(any()) :: boolean()
  (
    def has_constant?(:AGENTS_LLM_TTFT) do
      true
    end

    def has_constant?(:AGENTS_STT_TTFT) do
      true
    end

    def has_constant?(:AGENTS_TTS_TTFB) do
      true
    end

    def has_constant?(:CLIENT_VIDEO_SUBSCRIBER_FREEZE_COUNT) do
      true
    end

    def has_constant?(:CLIENT_VIDEO_SUBSCRIBER_TOTAL_FREEZE_DURATION) do
      true
    end

    def has_constant?(:CLIENT_VIDEO_SUBSCRIBER_PAUSE_COUNT) do
      true
    end

    def has_constant?(:CLIENT_VIDEO_SUBSCRIBER_TOTAL_PAUSES_DURATION) do
      true
    end

    def has_constant?(:CLIENT_AUDIO_SUBSCRIBER_CONCEALED_SAMPLES) do
      true
    end

    def has_constant?(:CLIENT_AUDIO_SUBSCRIBER_SILENT_CONCEALED_SAMPLES) do
      true
    end

    def has_constant?(:CLIENT_AUDIO_SUBSCRIBER_CONCEALMENT_EVENTS) do
      true
    end

    def has_constant?(:CLIENT_AUDIO_SUBSCRIBER_INTERRUPTION_COUNT) do
      true
    end

    def has_constant?(:CLIENT_AUDIO_SUBSCRIBER_TOTAL_INTERRUPTION_DURATION) do
      true
    end

    def has_constant?(:CLIENT_SUBSCRIBER_JITTER_BUFFER_DELAY) do
      true
    end

    def has_constant?(:CLIENT_SUBSCRIBER_JITTER_BUFFER_EMITTED_COUNT) do
      true
    end

    def has_constant?(:CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_BANDWIDTH) do
      true
    end

    def has_constant?(:CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_CPU) do
      true
    end

    def has_constant?(:CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_OTHER) do
      true
    end

    def has_constant?(:PUBLISHER_RTT) do
      true
    end

    def has_constant?(:SERVER_MESH_RTT) do
      true
    end

    def has_constant?(:SUBSCRIBER_RTT) do
      true
    end

    def has_constant?(:METRIC_LABEL_PREDEFINED_MAX_VALUE) do
      true
    end

    def has_constant?(_) do
      false
    end
  )
end
