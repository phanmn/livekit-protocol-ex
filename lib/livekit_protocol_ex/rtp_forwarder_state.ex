# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.RTPForwarderState do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          sender_report_state: [LivekitProtocolEx.RTCPSenderReportState.t()],
          rtp_munger: LivekitProtocolEx.RTPMungerState.t() | nil,
          dummy_start_timestamp_offset: non_neg_integer(),
          ext_first_timestamp: non_neg_integer(),
          pre_start_time: integer(),
          reference_layer_spatial: integer(),
          started: boolean(),
          codec_munger: {:vp8_munger, LivekitProtocolEx.VP8MungerState.t()} | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct sender_report_state: [],
            codec_munger: nil,
            rtp_munger: nil,
            dummy_start_timestamp_offset: 0,
            ext_first_timestamp: 0,
            pre_start_time: 0,
            reference_layer_spatial: 0,
            started: false,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_codec_munger(msg)
        |> encode_sender_report_state(msg)
        |> encode_rtp_munger(msg)
        |> encode_dummy_start_timestamp_offset(msg)
        |> encode_ext_first_timestamp(msg)
        |> encode_pre_start_time(msg)
        |> encode_reference_layer_spatial(msg)
        |> encode_started(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_codec_munger({acc, acc_size}, msg) do
      case msg.codec_munger do
        nil ->
          {acc, acc_size}

        {:vp8_munger, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {[":", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    end

    defp encode_sender_report_state({acc, acc_size}, msg) do
      case msg.sender_report_state do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "B" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:sender_report_state, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_rtp_munger({acc, acc_size}, msg) do
      if msg.rtp_munger == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.rtp_munger)
        {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:rtp_munger, "invalid field value"), __STACKTRACE__
    end

    defp encode_dummy_start_timestamp_offset({acc, acc_size}, msg) do
      if msg.dummy_start_timestamp_offset == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          Protox.Encode.encode_uint64(msg.dummy_start_timestamp_offset)

        {["(", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:dummy_start_timestamp_offset, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_ext_first_timestamp({acc, acc_size}, msg) do
      if msg.ext_first_timestamp == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint64(msg.ext_first_timestamp)
        {[" ", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ext_first_timestamp, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_pre_start_time({acc, acc_size}, msg) do
      if msg.pre_start_time == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.pre_start_time)
        {["\x18", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:pre_start_time, "invalid field value"), __STACKTRACE__
    end

    defp encode_reference_layer_spatial({acc, acc_size}, msg) do
      if msg.reference_layer_spatial == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.reference_layer_spatial)
        {["\x10", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:reference_layer_spatial, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_started({acc, acc_size}, msg) do
      if msg.started == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.started)
        {["\b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:started, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.RTPForwarderState))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 sender_report_state:
                   msg.sender_report_state ++
                     [LivekitProtocolEx.RTCPSenderReportState.decode!(delimited)]
               ], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.codec_munger do
                   {:vp8_munger, previous_value} ->
                     {:codec_munger,
                      {:vp8_munger,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.VP8MungerState.decode!(delimited)
                       )}}

                   _ ->
                     {:codec_munger,
                      {:vp8_munger, LivekitProtocolEx.VP8MungerState.decode!(delimited)}}
                 end
               ], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 rtp_munger:
                   Protox.MergeMessage.merge(
                     msg.rtp_munger,
                     LivekitProtocolEx.RTPMungerState.decode!(delimited)
                   )
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint64(bytes)
              {[dummy_start_timestamp_offset: value], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint64(bytes)
              {[ext_first_timestamp: value], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[pre_start_time: value], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[reference_layer_spatial: value], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[started: value], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:sender_report_state) do
      {:error, :no_default_value}
    end

    def default(:vp8_munger) do
      {:error, :no_default_value}
    end

    def default(:rtp_munger) do
      {:ok, nil}
    end

    def default(:dummy_start_timestamp_offset) do
      {:ok, 0}
    end

    def default(:ext_first_timestamp) do
      {:ok, 0}
    end

    def default(:pre_start_time) do
      {:ok, 0}
    end

    def default(:reference_layer_spatial) do
      {:ok, 0}
    end

    def default(:started) do
      {:ok, false}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        dummy_start_timestamp_offset: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :dummy_start_timestamp_offset,
          tag: 5,
          type: :uint64
        },
        ext_first_timestamp: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :ext_first_timestamp,
          tag: 4,
          type: :uint64
        },
        pre_start_time: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :pre_start_time,
          tag: 3,
          type: :int64
        },
        reference_layer_spatial: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :reference_layer_spatial,
          tag: 2,
          type: :int32
        },
        rtp_munger: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :rtp_munger,
          tag: 6,
          type: {:message, LivekitProtocolEx.RTPMungerState}
        },
        sender_report_state: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :sender_report_state,
          tag: 8,
          type: {:message, LivekitProtocolEx.RTCPSenderReportState}
        },
        started: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :started,
          tag: 1,
          type: :bool
        },
        vp8_munger: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :codec_munger},
          label: :optional,
          name: :vp8_munger,
          tag: 7,
          type: {:message, LivekitProtocolEx.VP8MungerState}
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.RTPForwarderState,
      syntax: :proto3
    }
  end
end
