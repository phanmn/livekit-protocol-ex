# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.CreateRoomRequest do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          agents: [LivekitProtocolEx.RoomAgentDispatch.t()],
          replay_enabled: boolean(),
          room_preset: String.t(),
          departure_timeout: non_neg_integer(),
          sync_streams: boolean(),
          max_playout_delay: non_neg_integer(),
          min_playout_delay: non_neg_integer(),
          egress: LivekitProtocolEx.RoomEgress.t() | nil,
          metadata: String.t(),
          node_id: String.t(),
          max_participants: non_neg_integer(),
          empty_timeout: non_neg_integer(),
          name: String.t(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct agents: [],
            replay_enabled: false,
            room_preset: "",
            departure_timeout: 0,
            sync_streams: false,
            max_playout_delay: 0,
            min_playout_delay: 0,
            egress: nil,
            metadata: "",
            node_id: "",
            max_participants: 0,
            empty_timeout: 0,
            name: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_agents(msg)
        |> encode_replay_enabled(msg)
        |> encode_room_preset(msg)
        |> encode_departure_timeout(msg)
        |> encode_sync_streams(msg)
        |> encode_max_playout_delay(msg)
        |> encode_min_playout_delay(msg)
        |> encode_egress(msg)
        |> encode_metadata(msg)
        |> encode_node_id(msg)
        |> encode_max_participants(msg)
        |> encode_empty_timeout(msg)
        |> encode_name(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_agents({acc, acc_size}, msg) do
      case msg.agents do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "r" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:agents, "invalid field value"), __STACKTRACE__
    end

    defp encode_replay_enabled({acc, acc_size}, msg) do
      if msg.replay_enabled == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.replay_enabled)
        {["h", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:replay_enabled, "invalid field value"), __STACKTRACE__
    end

    defp encode_room_preset({acc, acc_size}, msg) do
      if msg.room_preset == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.room_preset)
        {["b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:room_preset, "invalid field value"), __STACKTRACE__
    end

    defp encode_departure_timeout({acc, acc_size}, msg) do
      if msg.departure_timeout == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.departure_timeout)
        {["P", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:departure_timeout, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_sync_streams({acc, acc_size}, msg) do
      if msg.sync_streams == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.sync_streams)
        {["H", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:sync_streams, "invalid field value"), __STACKTRACE__
    end

    defp encode_max_playout_delay({acc, acc_size}, msg) do
      if msg.max_playout_delay == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.max_playout_delay)
        {["@", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:max_playout_delay, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_min_playout_delay({acc, acc_size}, msg) do
      if msg.min_playout_delay == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.min_playout_delay)
        {["8", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:min_playout_delay, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_egress({acc, acc_size}, msg) do
      if msg.egress == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.egress)
        {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:egress, "invalid field value"), __STACKTRACE__
    end

    defp encode_metadata({acc, acc_size}, msg) do
      if msg.metadata == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.metadata)
        {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:metadata, "invalid field value"), __STACKTRACE__
    end

    defp encode_node_id({acc, acc_size}, msg) do
      if msg.node_id == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.node_id)
        {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:node_id, "invalid field value"), __STACKTRACE__
    end

    defp encode_max_participants({acc, acc_size}, msg) do
      if msg.max_participants == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.max_participants)
        {["\x18", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:max_participants, "invalid field value"), __STACKTRACE__
    end

    defp encode_empty_timeout({acc, acc_size}, msg) do
      if msg.empty_timeout == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.empty_timeout)
        {["\x10", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:empty_timeout, "invalid field value"), __STACKTRACE__
    end

    defp encode_name({acc, acc_size}, msg) do
      if msg.name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.name)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:name, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.CreateRoomRequest))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[agents: msg.agents ++ [LivekitProtocolEx.RoomAgentDispatch.decode!(delimited)]],
               rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[replay_enabled: value], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[room_preset: Protox.Decode.validate_string!(delimited)], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[departure_timeout: value], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[sync_streams: value], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[max_playout_delay: value], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[min_playout_delay: value], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 egress:
                   Protox.MergeMessage.merge(
                     msg.egress,
                     LivekitProtocolEx.RoomEgress.decode!(delimited)
                   )
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[metadata: Protox.Decode.validate_string!(delimited)], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[node_id: Protox.Decode.validate_string!(delimited)], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[max_participants: value], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[empty_timeout: value], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[name: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:agents) do
      {:error, :no_default_value}
    end

    def default(:replay_enabled) do
      {:ok, false}
    end

    def default(:room_preset) do
      {:ok, ""}
    end

    def default(:departure_timeout) do
      {:ok, 0}
    end

    def default(:sync_streams) do
      {:ok, false}
    end

    def default(:max_playout_delay) do
      {:ok, 0}
    end

    def default(:min_playout_delay) do
      {:ok, 0}
    end

    def default(:egress) do
      {:ok, nil}
    end

    def default(:metadata) do
      {:ok, ""}
    end

    def default(:node_id) do
      {:ok, ""}
    end

    def default(:max_participants) do
      {:ok, 0}
    end

    def default(:empty_timeout) do
      {:ok, 0}
    end

    def default(:name) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        agents: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :agents,
          tag: 14,
          type: {:message, LivekitProtocolEx.RoomAgentDispatch}
        },
        departure_timeout: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :departure_timeout,
          tag: 10,
          type: :uint32
        },
        egress: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :egress,
          tag: 6,
          type: {:message, LivekitProtocolEx.RoomEgress}
        },
        empty_timeout: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :empty_timeout,
          tag: 2,
          type: :uint32
        },
        max_participants: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :max_participants,
          tag: 3,
          type: :uint32
        },
        max_playout_delay: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :max_playout_delay,
          tag: 8,
          type: :uint32
        },
        metadata: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :metadata,
          tag: 5,
          type: :string
        },
        min_playout_delay: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :min_playout_delay,
          tag: 7,
          type: :uint32
        },
        name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :name,
          tag: 1,
          type: :string
        },
        node_id: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :node_id,
          tag: 4,
          type: :string
        },
        replay_enabled: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :replay_enabled,
          tag: 13,
          type: :bool
        },
        room_preset: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :room_preset,
          tag: 12,
          type: :string
        },
        sync_streams: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :sync_streams,
          tag: 9,
          type: :bool
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.CreateRoomRequest,
      syntax: :proto3
    }
  end
end
