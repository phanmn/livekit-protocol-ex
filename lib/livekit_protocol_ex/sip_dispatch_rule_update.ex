# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.SIPDispatchRuleUpdate do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          attributes: %{String.t() => String.t()},
          rule: LivekitProtocolEx.SIPDispatchRule.t() | nil,
          trunk_ids: LivekitProtocolEx.ListUpdate.t() | nil,
          media_encryption: atom() | nil,
          metadata: String.t() | nil,
          name: String.t() | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct media_encryption: nil,
            attributes: %{},
            metadata: nil,
            name: nil,
            rule: nil,
            trunk_ids: nil,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_media_encryption(msg)
        |> encode_metadata(msg)
        |> encode_name(msg)
        |> encode_attributes(msg)
        |> encode_rule(msg)
        |> encode_trunk_ids(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_media_encryption({acc, acc_size}, msg) do
      case msg.media_encryption do
        nil ->
          {acc, acc_size}

        child_field_value ->
          {value_bytes, value_bytes_size} =
            child_field_value
            |> LivekitProtocolEx.SIPMediaEncryption.encode()
            |> Protox.Encode.encode_enum()

          {["0", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:media_encryption, "invalid field value"), __STACKTRACE__
    end

    defp encode_attributes({acc, acc_size}, msg) do
      map = Map.fetch!(msg, :attributes)

      if map_size(map) == 0 do
        {acc, acc_size}
      else
        Enum.reduce(map, {acc, acc_size}, fn {k, v}, {acc, acc_size} ->
          {k_value_bytes, k_value_len} = Protox.Encode.encode_string(k)
          {v_value_bytes, v_value_len} = Protox.Encode.encode_string(v)
          len = 2 + k_value_len + v_value_len
          {len_varint, len_varint_size} = Protox.Varint.encode(len)
          acc = [<<"*", len_varint::binary, "\n">>, k_value_bytes, "\x12", v_value_bytes | acc]
          {acc, acc_size + 3 + k_value_len + v_value_len + len_varint_size}
        end)
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:attributes, "invalid field value"), __STACKTRACE__
    end

    defp encode_metadata({acc, acc_size}, msg) do
      case msg.metadata do
        nil ->
          {acc, acc_size}

        child_field_value ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_string(child_field_value)
          {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:metadata, "invalid field value"), __STACKTRACE__
    end

    defp encode_name({acc, acc_size}, msg) do
      case msg.name do
        nil ->
          {acc, acc_size}

        child_field_value ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_string(child_field_value)
          {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:name, "invalid field value"), __STACKTRACE__
    end

    defp encode_rule({acc, acc_size}, msg) do
      if msg.rule == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.rule)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:rule, "invalid field value"), __STACKTRACE__
    end

    defp encode_trunk_ids({acc, acc_size}, msg) do
      if msg.trunk_ids == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.trunk_ids)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:trunk_ids, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.SIPDispatchRuleUpdate))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {value, rest} =
                Protox.Decode.parse_enum(bytes, LivekitProtocolEx.SIPMediaEncryption)

              {[media_encryption: value], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 (
                   {entry_key, entry_value} =
                     (
                       {map_key, map_value} = parse_string_string({:unset, :unset}, delimited)

                       map_key =
                         case map_key do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_key
                         end

                       map_value =
                         case map_value do
                           :unset -> Protox.Default.default(:string)
                           _ -> map_value
                         end

                       {map_key, map_value}
                     )

                   {:attributes, Map.put(msg.attributes, entry_key, entry_value)}
                 )
               ], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[metadata: Protox.Decode.validate_string!(delimited)], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[name: Protox.Decode.validate_string!(delimited)], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 rule:
                   Protox.MergeMessage.merge(
                     msg.rule,
                     LivekitProtocolEx.SIPDispatchRule.decode!(delimited)
                   )
               ], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 trunk_ids:
                   Protox.MergeMessage.merge(
                     msg.trunk_ids,
                     LivekitProtocolEx.ListUpdate.decode!(delimited)
                   )
               ], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )

    (
      defp parse_string_string(map_entry, <<>>) do
        map_entry
      end

      defp parse_string_string({entry_key, entry_value}, bytes) do
        {map_entry, rest} =
          case Protox.Decode.parse_key(bytes) do
            {1, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{res, entry_value}, rest}

            {2, _, rest} ->
              {res, rest} =
                (
                  {len, new_rest} = Protox.Varint.decode(rest)
                  {delimited, new_rest} = Protox.Decode.parse_delimited(new_rest, len)
                  {Protox.Decode.validate_string!(delimited), new_rest}
                )

              {{entry_key, res}, rest}

            {tag, wire_type, rest} ->
              {_, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {{entry_key, entry_value}, rest}
          end

        parse_string_string(map_entry, rest)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:media_encryption) do
      {:error, :no_default_value}
    end

    def default(:attributes) do
      {:error, :no_default_value}
    end

    def default(:metadata) do
      {:error, :no_default_value}
    end

    def default(:name) do
      {:error, :no_default_value}
    end

    def default(:rule) do
      {:ok, nil}
    end

    def default(:trunk_ids) do
      {:ok, nil}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        attributes: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :map,
          label: nil,
          name: :attributes,
          tag: 5,
          type: {:string, :string}
        },
        media_encryption: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :_media_encryption},
          label: :proto3_optional,
          name: :media_encryption,
          tag: 6,
          type: {:enum, LivekitProtocolEx.SIPMediaEncryption}
        },
        metadata: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :_metadata},
          label: :proto3_optional,
          name: :metadata,
          tag: 4,
          type: :string
        },
        name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :_name},
          label: :proto3_optional,
          name: :name,
          tag: 3,
          type: :string
        },
        rule: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :rule,
          tag: 2,
          type: {:message, LivekitProtocolEx.SIPDispatchRule}
        },
        trunk_ids: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :trunk_ids,
          tag: 1,
          type: {:message, LivekitProtocolEx.ListUpdate}
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.SIPDispatchRuleUpdate,
      syntax: :proto3
    }
  end
end
