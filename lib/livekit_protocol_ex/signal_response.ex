# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.SignalResponse do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          message:
            {:join, LivekitProtocolEx.JoinResponse.t()}
            | {:answer, LivekitProtocolEx.SessionDescription.t()}
            | {:offer, LivekitProtocolEx.SessionDescription.t()}
            | {:trickle, LivekitProtocolEx.TrickleRequest.t()}
            | {:update, LivekitProtocolEx.ParticipantUpdate.t()}
            | {:track_published, LivekitProtocolEx.TrackPublishedResponse.t()}
            | {:leave, LivekitProtocolEx.LeaveRequest.t()}
            | {:mute, LivekitProtocolEx.MuteTrackRequest.t()}
            | {:speakers_changed, LivekitProtocolEx.SpeakersChanged.t()}
            | {:room_update, LivekitProtocolEx.RoomUpdate.t()}
            | {:connection_quality, LivekitProtocolEx.ConnectionQualityUpdate.t()}
            | {:stream_state_update, LivekitProtocolEx.StreamStateUpdate.t()}
            | {:subscribed_quality_update, LivekitProtocolEx.SubscribedQualityUpdate.t()}
            | {:subscription_permission_update,
               LivekitProtocolEx.SubscriptionPermissionUpdate.t()}
            | {:refresh_token, String.t()}
            | {:track_unpublished, LivekitProtocolEx.TrackUnpublishedResponse.t()}
            | {:pong, integer()}
            | {:reconnect, LivekitProtocolEx.ReconnectResponse.t()}
            | {:pong_resp, LivekitProtocolEx.Pong.t()}
            | {:subscription_response, LivekitProtocolEx.SubscriptionResponse.t()}
            | {:request_response, LivekitProtocolEx.RequestResponse.t()}
            | {:track_subscribed, LivekitProtocolEx.TrackSubscribed.t()}
            | {:room_moved, LivekitProtocolEx.RoomMovedResponse.t()}
            | {:media_sections_requirement, LivekitProtocolEx.MediaSectionsRequirement.t()}
            | {:subscribed_audio_codec_update, LivekitProtocolEx.SubscribedAudioCodecUpdate.t()}
            | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct message: nil, __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0} |> encode_message(msg) |> encode_unknown_fields(msg)
      end
    )

    defp encode_message({acc, acc_size}, msg) do
      case msg.message do
        nil ->
          {acc, acc_size}

        {:subscribed_audio_codec_update, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\xD2\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:media_sections_requirement, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\xCA\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:room_moved, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\xC2\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:track_subscribed, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\xBA\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:request_response, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\xB2\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:subscription_response, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\xAA\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:pong_resp, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\xA2\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:reconnect, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x9A\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:pong, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(child_field_value)
          {["\x90\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:track_unpublished, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x8A\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:refresh_token, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_string(child_field_value)
          {["\x82\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:subscription_permission_update, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["z", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:subscribed_quality_update, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["r", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:stream_state_update, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["j", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:connection_quality, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["b", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:room_update, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["Z", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:speakers_changed, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["R", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:mute, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["J", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:leave, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["B", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:track_published, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:update, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:trickle, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:offer, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:answer, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:join, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.SignalResponse))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<26::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:subscribed_audio_codec_update, previous_value} ->
                     {:message,
                      {:subscribed_audio_codec_update,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SubscribedAudioCodecUpdate.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:subscribed_audio_codec_update,
                       LivekitProtocolEx.SubscribedAudioCodecUpdate.decode!(delimited)}}
                 end
               ], rest}

            <<25::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:media_sections_requirement, previous_value} ->
                     {:message,
                      {:media_sections_requirement,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.MediaSectionsRequirement.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:media_sections_requirement,
                       LivekitProtocolEx.MediaSectionsRequirement.decode!(delimited)}}
                 end
               ], rest}

            <<24::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:room_moved, previous_value} ->
                     {:message,
                      {:room_moved,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.RoomMovedResponse.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:room_moved, LivekitProtocolEx.RoomMovedResponse.decode!(delimited)}}
                 end
               ], rest}

            <<23::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:track_subscribed, previous_value} ->
                     {:message,
                      {:track_subscribed,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.TrackSubscribed.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:track_subscribed, LivekitProtocolEx.TrackSubscribed.decode!(delimited)}}
                 end
               ], rest}

            <<22::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:request_response, previous_value} ->
                     {:message,
                      {:request_response,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.RequestResponse.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:request_response, LivekitProtocolEx.RequestResponse.decode!(delimited)}}
                 end
               ], rest}

            <<21::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:subscription_response, previous_value} ->
                     {:message,
                      {:subscription_response,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SubscriptionResponse.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:subscription_response,
                       LivekitProtocolEx.SubscriptionResponse.decode!(delimited)}}
                 end
               ], rest}

            <<20::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:pong_resp, previous_value} ->
                     {:message,
                      {:pong_resp,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.Pong.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:pong_resp, LivekitProtocolEx.Pong.decode!(delimited)}}
                 end
               ], rest}

            <<19::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:reconnect, previous_value} ->
                     {:message,
                      {:reconnect,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.ReconnectResponse.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:reconnect, LivekitProtocolEx.ReconnectResponse.decode!(delimited)}}
                 end
               ], rest}

            <<18::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[message: {:pong, value}], rest}

            <<17::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:track_unpublished, previous_value} ->
                     {:message,
                      {:track_unpublished,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.TrackUnpublishedResponse.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:track_unpublished,
                       LivekitProtocolEx.TrackUnpublishedResponse.decode!(delimited)}}
                 end
               ], rest}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[message: {:refresh_token, Protox.Decode.validate_string!(delimited)}], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:subscription_permission_update, previous_value} ->
                     {:message,
                      {:subscription_permission_update,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SubscriptionPermissionUpdate.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:subscription_permission_update,
                       LivekitProtocolEx.SubscriptionPermissionUpdate.decode!(delimited)}}
                 end
               ], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:subscribed_quality_update, previous_value} ->
                     {:message,
                      {:subscribed_quality_update,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SubscribedQualityUpdate.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:subscribed_quality_update,
                       LivekitProtocolEx.SubscribedQualityUpdate.decode!(delimited)}}
                 end
               ], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:stream_state_update, previous_value} ->
                     {:message,
                      {:stream_state_update,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.StreamStateUpdate.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:stream_state_update,
                       LivekitProtocolEx.StreamStateUpdate.decode!(delimited)}}
                 end
               ], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:connection_quality, previous_value} ->
                     {:message,
                      {:connection_quality,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.ConnectionQualityUpdate.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:connection_quality,
                       LivekitProtocolEx.ConnectionQualityUpdate.decode!(delimited)}}
                 end
               ], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:room_update, previous_value} ->
                     {:message,
                      {:room_update,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.RoomUpdate.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:room_update, LivekitProtocolEx.RoomUpdate.decode!(delimited)}}
                 end
               ], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:speakers_changed, previous_value} ->
                     {:message,
                      {:speakers_changed,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SpeakersChanged.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:speakers_changed, LivekitProtocolEx.SpeakersChanged.decode!(delimited)}}
                 end
               ], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:mute, previous_value} ->
                     {:message,
                      {:mute,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.MuteTrackRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:mute, LivekitProtocolEx.MuteTrackRequest.decode!(delimited)}}
                 end
               ], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:leave, previous_value} ->
                     {:message,
                      {:leave,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.LeaveRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:leave, LivekitProtocolEx.LeaveRequest.decode!(delimited)}}
                 end
               ], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:track_published, previous_value} ->
                     {:message,
                      {:track_published,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.TrackPublishedResponse.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:track_published,
                       LivekitProtocolEx.TrackPublishedResponse.decode!(delimited)}}
                 end
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:update, previous_value} ->
                     {:message,
                      {:update,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.ParticipantUpdate.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:update, LivekitProtocolEx.ParticipantUpdate.decode!(delimited)}}
                 end
               ], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:trickle, previous_value} ->
                     {:message,
                      {:trickle,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.TrickleRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:trickle, LivekitProtocolEx.TrickleRequest.decode!(delimited)}}
                 end
               ], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:offer, previous_value} ->
                     {:message,
                      {:offer,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SessionDescription.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:offer, LivekitProtocolEx.SessionDescription.decode!(delimited)}}
                 end
               ], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:answer, previous_value} ->
                     {:message,
                      {:answer,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SessionDescription.decode!(delimited)
                       )}}

                   _ ->
                     {:message,
                      {:answer, LivekitProtocolEx.SessionDescription.decode!(delimited)}}
                 end
               ], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.message do
                   {:join, previous_value} ->
                     {:message,
                      {:join,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.JoinResponse.decode!(delimited)
                       )}}

                   _ ->
                     {:message, {:join, LivekitProtocolEx.JoinResponse.decode!(delimited)}}
                 end
               ], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:subscribed_audio_codec_update) do
      {:error, :no_default_value}
    end

    def default(:media_sections_requirement) do
      {:error, :no_default_value}
    end

    def default(:room_moved) do
      {:error, :no_default_value}
    end

    def default(:track_subscribed) do
      {:error, :no_default_value}
    end

    def default(:request_response) do
      {:error, :no_default_value}
    end

    def default(:subscription_response) do
      {:error, :no_default_value}
    end

    def default(:pong_resp) do
      {:error, :no_default_value}
    end

    def default(:reconnect) do
      {:error, :no_default_value}
    end

    def default(:pong) do
      {:error, :no_default_value}
    end

    def default(:track_unpublished) do
      {:error, :no_default_value}
    end

    def default(:refresh_token) do
      {:error, :no_default_value}
    end

    def default(:subscription_permission_update) do
      {:error, :no_default_value}
    end

    def default(:subscribed_quality_update) do
      {:error, :no_default_value}
    end

    def default(:stream_state_update) do
      {:error, :no_default_value}
    end

    def default(:connection_quality) do
      {:error, :no_default_value}
    end

    def default(:room_update) do
      {:error, :no_default_value}
    end

    def default(:speakers_changed) do
      {:error, :no_default_value}
    end

    def default(:mute) do
      {:error, :no_default_value}
    end

    def default(:leave) do
      {:error, :no_default_value}
    end

    def default(:track_published) do
      {:error, :no_default_value}
    end

    def default(:update) do
      {:error, :no_default_value}
    end

    def default(:trickle) do
      {:error, :no_default_value}
    end

    def default(:offer) do
      {:error, :no_default_value}
    end

    def default(:answer) do
      {:error, :no_default_value}
    end

    def default(:join) do
      {:error, :no_default_value}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        answer: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :answer,
          tag: 2,
          type: {:message, LivekitProtocolEx.SessionDescription}
        },
        connection_quality: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :connection_quality,
          tag: 12,
          type: {:message, LivekitProtocolEx.ConnectionQualityUpdate}
        },
        join: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :join,
          tag: 1,
          type: {:message, LivekitProtocolEx.JoinResponse}
        },
        leave: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :leave,
          tag: 8,
          type: {:message, LivekitProtocolEx.LeaveRequest}
        },
        media_sections_requirement: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :media_sections_requirement,
          tag: 25,
          type: {:message, LivekitProtocolEx.MediaSectionsRequirement}
        },
        mute: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :mute,
          tag: 9,
          type: {:message, LivekitProtocolEx.MuteTrackRequest}
        },
        offer: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :offer,
          tag: 3,
          type: {:message, LivekitProtocolEx.SessionDescription}
        },
        pong: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :pong,
          tag: 18,
          type: :int64
        },
        pong_resp: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :pong_resp,
          tag: 20,
          type: {:message, LivekitProtocolEx.Pong}
        },
        reconnect: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :reconnect,
          tag: 19,
          type: {:message, LivekitProtocolEx.ReconnectResponse}
        },
        refresh_token: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :refresh_token,
          tag: 16,
          type: :string
        },
        request_response: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :request_response,
          tag: 22,
          type: {:message, LivekitProtocolEx.RequestResponse}
        },
        room_moved: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :room_moved,
          tag: 24,
          type: {:message, LivekitProtocolEx.RoomMovedResponse}
        },
        room_update: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :room_update,
          tag: 11,
          type: {:message, LivekitProtocolEx.RoomUpdate}
        },
        speakers_changed: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :speakers_changed,
          tag: 10,
          type: {:message, LivekitProtocolEx.SpeakersChanged}
        },
        stream_state_update: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :stream_state_update,
          tag: 13,
          type: {:message, LivekitProtocolEx.StreamStateUpdate}
        },
        subscribed_audio_codec_update: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :subscribed_audio_codec_update,
          tag: 26,
          type: {:message, LivekitProtocolEx.SubscribedAudioCodecUpdate}
        },
        subscribed_quality_update: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :subscribed_quality_update,
          tag: 14,
          type: {:message, LivekitProtocolEx.SubscribedQualityUpdate}
        },
        subscription_permission_update: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :subscription_permission_update,
          tag: 15,
          type: {:message, LivekitProtocolEx.SubscriptionPermissionUpdate}
        },
        subscription_response: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :subscription_response,
          tag: 21,
          type: {:message, LivekitProtocolEx.SubscriptionResponse}
        },
        track_published: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :track_published,
          tag: 6,
          type: {:message, LivekitProtocolEx.TrackPublishedResponse}
        },
        track_subscribed: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :track_subscribed,
          tag: 23,
          type: {:message, LivekitProtocolEx.TrackSubscribed}
        },
        track_unpublished: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :track_unpublished,
          tag: 17,
          type: {:message, LivekitProtocolEx.TrackUnpublishedResponse}
        },
        trickle: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :trickle,
          tag: 4,
          type: {:message, LivekitProtocolEx.TrickleRequest}
        },
        update: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :message},
          label: :optional,
          name: :update,
          tag: 5,
          type: {:message, LivekitProtocolEx.ParticipantUpdate}
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.SignalResponse,
      syntax: :proto3
    }
  end
end
