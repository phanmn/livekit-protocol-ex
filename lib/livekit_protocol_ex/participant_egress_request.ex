# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.ParticipantEgressRequest do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          webhooks: [LivekitProtocolEx.WebhookConfig.t()],
          image_outputs: [LivekitProtocolEx.ImageOutput.t()],
          segment_outputs: [LivekitProtocolEx.SegmentedFileOutput.t()],
          stream_outputs: [LivekitProtocolEx.StreamOutput.t()],
          file_outputs: [LivekitProtocolEx.EncodedFileOutput.t()],
          screen_share: boolean(),
          identity: String.t(),
          room_name: String.t(),
          options: {:preset, atom()} | {:advanced, LivekitProtocolEx.EncodingOptions.t()} | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct webhooks: [],
            image_outputs: [],
            segment_outputs: [],
            stream_outputs: [],
            file_outputs: [],
            options: nil,
            screen_share: false,
            identity: "",
            room_name: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_options(msg)
        |> encode_webhooks(msg)
        |> encode_image_outputs(msg)
        |> encode_segment_outputs(msg)
        |> encode_stream_outputs(msg)
        |> encode_file_outputs(msg)
        |> encode_screen_share(msg)
        |> encode_identity(msg)
        |> encode_room_name(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_options({acc, acc_size}, msg) do
      case msg.options do
        nil ->
          {acc, acc_size}

        {:advanced, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:preset, child_field_value} ->
          {value_bytes, value_bytes_size} =
            child_field_value
            |> LivekitProtocolEx.EncodingOptionsPreset.encode()
            |> Protox.Encode.encode_enum()

          {[" ", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    end

    defp encode_webhooks({acc, acc_size}, msg) do
      case msg.webhooks do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "R" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:webhooks, "invalid field value"), __STACKTRACE__
    end

    defp encode_image_outputs({acc, acc_size}, msg) do
      case msg.image_outputs do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "J" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:image_outputs, "invalid field value"), __STACKTRACE__
    end

    defp encode_segment_outputs({acc, acc_size}, msg) do
      case msg.segment_outputs do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "B" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:segment_outputs, "invalid field value"), __STACKTRACE__
    end

    defp encode_stream_outputs({acc, acc_size}, msg) do
      case msg.stream_outputs do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, ":" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:stream_outputs, "invalid field value"), __STACKTRACE__
    end

    defp encode_file_outputs({acc, acc_size}, msg) do
      case msg.file_outputs do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "2" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:file_outputs, "invalid field value"), __STACKTRACE__
    end

    defp encode_screen_share({acc, acc_size}, msg) do
      if msg.screen_share == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.screen_share)
        {["\x18", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:screen_share, "invalid field value"), __STACKTRACE__
    end

    defp encode_identity({acc, acc_size}, msg) do
      if msg.identity == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.identity)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:identity, "invalid field value"), __STACKTRACE__
    end

    defp encode_room_name({acc, acc_size}, msg) do
      if msg.room_name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.room_name)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:room_name, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.ParticipantEgressRequest))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[webhooks: msg.webhooks ++ [LivekitProtocolEx.WebhookConfig.decode!(delimited)]],
               rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 image_outputs:
                   msg.image_outputs ++ [LivekitProtocolEx.ImageOutput.decode!(delimited)]
               ], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 segment_outputs:
                   msg.segment_outputs ++
                     [LivekitProtocolEx.SegmentedFileOutput.decode!(delimited)]
               ], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 stream_outputs:
                   msg.stream_outputs ++ [LivekitProtocolEx.StreamOutput.decode!(delimited)]
               ], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 file_outputs:
                   msg.file_outputs ++ [LivekitProtocolEx.EncodedFileOutput.decode!(delimited)]
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.options do
                   {:advanced, previous_value} ->
                     {:options,
                      {:advanced,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.EncodingOptions.decode!(delimited)
                       )}}

                   _ ->
                     {:options, {:advanced, LivekitProtocolEx.EncodingOptions.decode!(delimited)}}
                 end
               ], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {value, rest} =
                Protox.Decode.parse_enum(bytes, LivekitProtocolEx.EncodingOptionsPreset)

              {[options: {:preset, value}], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[screen_share: value], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[identity: Protox.Decode.validate_string!(delimited)], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[room_name: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:webhooks) do
      {:error, :no_default_value}
    end

    def default(:image_outputs) do
      {:error, :no_default_value}
    end

    def default(:segment_outputs) do
      {:error, :no_default_value}
    end

    def default(:stream_outputs) do
      {:error, :no_default_value}
    end

    def default(:file_outputs) do
      {:error, :no_default_value}
    end

    def default(:advanced) do
      {:error, :no_default_value}
    end

    def default(:preset) do
      {:error, :no_default_value}
    end

    def default(:screen_share) do
      {:ok, false}
    end

    def default(:identity) do
      {:ok, ""}
    end

    def default(:room_name) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        advanced: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :options},
          label: :optional,
          name: :advanced,
          tag: 5,
          type: {:message, LivekitProtocolEx.EncodingOptions}
        },
        file_outputs: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :file_outputs,
          tag: 6,
          type: {:message, LivekitProtocolEx.EncodedFileOutput}
        },
        identity: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :identity,
          tag: 2,
          type: :string
        },
        image_outputs: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :image_outputs,
          tag: 9,
          type: {:message, LivekitProtocolEx.ImageOutput}
        },
        preset: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :options},
          label: :optional,
          name: :preset,
          tag: 4,
          type: {:enum, LivekitProtocolEx.EncodingOptionsPreset}
        },
        room_name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :room_name,
          tag: 1,
          type: :string
        },
        screen_share: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :screen_share,
          tag: 3,
          type: :bool
        },
        segment_outputs: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :segment_outputs,
          tag: 8,
          type: {:message, LivekitProtocolEx.SegmentedFileOutput}
        },
        stream_outputs: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :stream_outputs,
          tag: 7,
          type: {:message, LivekitProtocolEx.StreamOutput}
        },
        webhooks: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :webhooks,
          tag: 10,
          type: {:message, LivekitProtocolEx.WebhookConfig}
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.ParticipantEgressRequest,
      syntax: :proto3
    }
  end
end
