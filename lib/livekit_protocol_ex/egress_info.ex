# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule LivekitProtocolEx.EgressInfo do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          source_type: atom(),
          backup_storage_used: boolean(),
          manifest_location: String.t(),
          error_code: integer(),
          details: String.t(),
          image_results: [LivekitProtocolEx.ImagesInfo.t()],
          updated_at: integer(),
          segment_results: [LivekitProtocolEx.SegmentsInfo.t()],
          file_results: [LivekitProtocolEx.FileInfo.t()],
          stream_results: [LivekitProtocolEx.StreamInfo.t()],
          room_name: String.t(),
          ended_at: integer(),
          started_at: integer(),
          error: String.t(),
          status: atom(),
          room_id: String.t(),
          egress_id: String.t(),
          request:
            {:room_composite, LivekitProtocolEx.RoomCompositeEgressRequest.t()}
            | {:track_composite, LivekitProtocolEx.TrackCompositeEgressRequest.t()}
            | {:track, LivekitProtocolEx.TrackEgressRequest.t()}
            | {:web, LivekitProtocolEx.WebEgressRequest.t()}
            | {:participant, LivekitProtocolEx.ParticipantEgressRequest.t()}
            | nil,
          result:
            {:stream, LivekitProtocolEx.StreamInfoList.t()}
            | {:file, LivekitProtocolEx.FileInfo.t()}
            | {:segments, LivekitProtocolEx.SegmentsInfo.t()}
            | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct source_type: :EGRESS_SOURCE_TYPE_WEB,
            backup_storage_used: false,
            manifest_location: "",
            error_code: 0,
            details: "",
            image_results: [],
            request: nil,
            updated_at: 0,
            segment_results: [],
            file_results: [],
            stream_results: [],
            room_name: "",
            result: nil,
            ended_at: 0,
            started_at: 0,
            error: "",
            status: :EGRESS_STARTING,
            room_id: "",
            egress_id: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_request(msg)
        |> encode_result(msg)
        |> encode_source_type(msg)
        |> encode_backup_storage_used(msg)
        |> encode_manifest_location(msg)
        |> encode_error_code(msg)
        |> encode_details(msg)
        |> encode_image_results(msg)
        |> encode_updated_at(msg)
        |> encode_segment_results(msg)
        |> encode_file_results(msg)
        |> encode_stream_results(msg)
        |> encode_room_name(msg)
        |> encode_ended_at(msg)
        |> encode_started_at(msg)
        |> encode_error(msg)
        |> encode_status(msg)
        |> encode_room_id(msg)
        |> encode_egress_id(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_request({acc, acc_size}, msg) do
      case msg.request do
        nil ->
          {acc, acc_size}

        {:participant, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\x9A\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}

        {:web, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["r", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:track, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:track_composite, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:room_composite, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    end

    defp encode_result({acc, acc_size}, msg) do
      case msg.result do
        nil ->
          {acc, acc_size}

        {:segments, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["b", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:file, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {["B", value_bytes | acc], acc_size + 1 + value_bytes_size}

        {:stream, child_field_value} ->
          {value_bytes, value_bytes_size} = Protox.Encode.encode_message(child_field_value)
          {[":", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    end

    defp encode_source_type({acc, acc_size}, msg) do
      if msg.source_type == :EGRESS_SOURCE_TYPE_WEB do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.source_type
          |> LivekitProtocolEx.EgressSourceType.encode()
          |> Protox.Encode.encode_enum()

        {["\xD0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:source_type, "invalid field value"), __STACKTRACE__
    end

    defp encode_backup_storage_used({acc, acc_size}, msg) do
      if msg.backup_storage_used == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.backup_storage_used)
        {["\xC8\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:backup_storage_used, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_manifest_location({acc, acc_size}, msg) do
      if msg.manifest_location == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.manifest_location)
        {["\xBA\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:manifest_location, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_error_code({acc, acc_size}, msg) do
      if msg.error_code == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.error_code)
        {["\xB0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:error_code, "invalid field value"), __STACKTRACE__
    end

    defp encode_details({acc, acc_size}, msg) do
      if msg.details == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.details)
        {["\xAA\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:details, "invalid field value"), __STACKTRACE__
    end

    defp encode_image_results({acc, acc_size}, msg) do
      case msg.image_results do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\xA2\x01" | local_acc], local_acc_size + 2 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:image_results, "invalid field value"), __STACKTRACE__
    end

    defp encode_updated_at({acc, acc_size}, msg) do
      if msg.updated_at == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.updated_at)
        {["\x90\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:updated_at, "invalid field value"), __STACKTRACE__
    end

    defp encode_segment_results({acc, acc_size}, msg) do
      case msg.segment_results do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\x8A\x01" | local_acc], local_acc_size + 2 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:segment_results, "invalid field value"), __STACKTRACE__
    end

    defp encode_file_results({acc, acc_size}, msg) do
      case msg.file_results do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\x82\x01" | local_acc], local_acc_size + 2 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:file_results, "invalid field value"), __STACKTRACE__
    end

    defp encode_stream_results({acc, acc_size}, msg) do
      case msg.stream_results do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "z" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:stream_results, "invalid field value"), __STACKTRACE__
    end

    defp encode_room_name({acc, acc_size}, msg) do
      if msg.room_name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.room_name)
        {["j", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:room_name, "invalid field value"), __STACKTRACE__
    end

    defp encode_ended_at({acc, acc_size}, msg) do
      if msg.ended_at == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.ended_at)
        {["X", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ended_at, "invalid field value"), __STACKTRACE__
    end

    defp encode_started_at({acc, acc_size}, msg) do
      if msg.started_at == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int64(msg.started_at)
        {["P", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:started_at, "invalid field value"), __STACKTRACE__
    end

    defp encode_error({acc, acc_size}, msg) do
      if msg.error == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.error)
        {["J", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:error, "invalid field value"), __STACKTRACE__
    end

    defp encode_status({acc, acc_size}, msg) do
      if msg.status == :EGRESS_STARTING do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.status |> LivekitProtocolEx.EgressStatus.encode() |> Protox.Encode.encode_enum()

        {["\x18", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:status, "invalid field value"), __STACKTRACE__
    end

    defp encode_room_id({acc, acc_size}, msg) do
      if msg.room_id == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.room_id)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:room_id, "invalid field value"), __STACKTRACE__
    end

    defp encode_egress_id({acc, acc_size}, msg) do
      if msg.egress_id == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.egress_id)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:egress_id, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(LivekitProtocolEx.EgressInfo))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<26::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.EgressSourceType)
              {[source_type: value], rest}

            <<25::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[backup_storage_used: value], rest}

            <<23::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[manifest_location: Protox.Decode.validate_string!(delimited)], rest}

            <<22::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[error_code: value], rest}

            <<21::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[details: Protox.Decode.validate_string!(delimited)], rest}

            <<20::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 image_results:
                   msg.image_results ++ [LivekitProtocolEx.ImagesInfo.decode!(delimited)]
               ], rest}

            <<19::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.request do
                   {:participant, previous_value} ->
                     {:request,
                      {:participant,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.ParticipantEgressRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:request,
                      {:participant,
                       LivekitProtocolEx.ParticipantEgressRequest.decode!(delimited)}}
                 end
               ], rest}

            <<18::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[updated_at: value], rest}

            <<17::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 segment_results:
                   msg.segment_results ++ [LivekitProtocolEx.SegmentsInfo.decode!(delimited)]
               ], rest}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 file_results: msg.file_results ++ [LivekitProtocolEx.FileInfo.decode!(delimited)]
               ], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 stream_results:
                   msg.stream_results ++ [LivekitProtocolEx.StreamInfo.decode!(delimited)]
               ], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.request do
                   {:web, previous_value} ->
                     {:request,
                      {:web,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.WebEgressRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:request, {:web, LivekitProtocolEx.WebEgressRequest.decode!(delimited)}}
                 end
               ], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[room_name: Protox.Decode.validate_string!(delimited)], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.result do
                   {:segments, previous_value} ->
                     {:result,
                      {:segments,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.SegmentsInfo.decode!(delimited)
                       )}}

                   _ ->
                     {:result, {:segments, LivekitProtocolEx.SegmentsInfo.decode!(delimited)}}
                 end
               ], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[ended_at: value], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int64(bytes)
              {[started_at: value], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[error: Protox.Decode.validate_string!(delimited)], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.result do
                   {:file, previous_value} ->
                     {:result,
                      {:file,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.FileInfo.decode!(delimited)
                       )}}

                   _ ->
                     {:result, {:file, LivekitProtocolEx.FileInfo.decode!(delimited)}}
                 end
               ], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.result do
                   {:stream, previous_value} ->
                     {:result,
                      {:stream,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.StreamInfoList.decode!(delimited)
                       )}}

                   _ ->
                     {:result, {:stream, LivekitProtocolEx.StreamInfoList.decode!(delimited)}}
                 end
               ], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.request do
                   {:track, previous_value} ->
                     {:request,
                      {:track,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.TrackEgressRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:request, {:track, LivekitProtocolEx.TrackEgressRequest.decode!(delimited)}}
                 end
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.request do
                   {:track_composite, previous_value} ->
                     {:request,
                      {:track_composite,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.TrackCompositeEgressRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:request,
                      {:track_composite,
                       LivekitProtocolEx.TrackCompositeEgressRequest.decode!(delimited)}}
                 end
               ], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 case msg.request do
                   {:room_composite, previous_value} ->
                     {:request,
                      {:room_composite,
                       Protox.MergeMessage.merge(
                         previous_value,
                         LivekitProtocolEx.RoomCompositeEgressRequest.decode!(delimited)
                       )}}

                   _ ->
                     {:request,
                      {:room_composite,
                       LivekitProtocolEx.RoomCompositeEgressRequest.decode!(delimited)}}
                 end
               ], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, LivekitProtocolEx.EgressStatus)
              {[status: value], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[room_id: Protox.Decode.validate_string!(delimited)], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[egress_id: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:source_type) do
      {:ok, :EGRESS_SOURCE_TYPE_WEB}
    end

    def default(:backup_storage_used) do
      {:ok, false}
    end

    def default(:manifest_location) do
      {:ok, ""}
    end

    def default(:error_code) do
      {:ok, 0}
    end

    def default(:details) do
      {:ok, ""}
    end

    def default(:image_results) do
      {:error, :no_default_value}
    end

    def default(:participant) do
      {:error, :no_default_value}
    end

    def default(:updated_at) do
      {:ok, 0}
    end

    def default(:segment_results) do
      {:error, :no_default_value}
    end

    def default(:file_results) do
      {:error, :no_default_value}
    end

    def default(:stream_results) do
      {:error, :no_default_value}
    end

    def default(:web) do
      {:error, :no_default_value}
    end

    def default(:room_name) do
      {:ok, ""}
    end

    def default(:segments) do
      {:error, :no_default_value}
    end

    def default(:ended_at) do
      {:ok, 0}
    end

    def default(:started_at) do
      {:ok, 0}
    end

    def default(:error) do
      {:ok, ""}
    end

    def default(:file) do
      {:error, :no_default_value}
    end

    def default(:stream) do
      {:error, :no_default_value}
    end

    def default(:track) do
      {:error, :no_default_value}
    end

    def default(:track_composite) do
      {:error, :no_default_value}
    end

    def default(:room_composite) do
      {:error, :no_default_value}
    end

    def default(:status) do
      {:ok, :EGRESS_STARTING}
    end

    def default(:room_id) do
      {:ok, ""}
    end

    def default(:egress_id) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        backup_storage_used: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :backup_storage_used,
          tag: 25,
          type: :bool
        },
        details: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :details,
          tag: 21,
          type: :string
        },
        egress_id: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :egress_id,
          tag: 1,
          type: :string
        },
        ended_at: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :ended_at,
          tag: 11,
          type: :int64
        },
        error: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :error,
          tag: 9,
          type: :string
        },
        error_code: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :error_code,
          tag: 22,
          type: :int32
        },
        file: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :result},
          label: :optional,
          name: :file,
          tag: 8,
          type: {:message, LivekitProtocolEx.FileInfo}
        },
        file_results: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :file_results,
          tag: 16,
          type: {:message, LivekitProtocolEx.FileInfo}
        },
        image_results: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :image_results,
          tag: 20,
          type: {:message, LivekitProtocolEx.ImagesInfo}
        },
        manifest_location: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :manifest_location,
          tag: 23,
          type: :string
        },
        participant: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :request},
          label: :optional,
          name: :participant,
          tag: 19,
          type: {:message, LivekitProtocolEx.ParticipantEgressRequest}
        },
        room_composite: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :request},
          label: :optional,
          name: :room_composite,
          tag: 4,
          type: {:message, LivekitProtocolEx.RoomCompositeEgressRequest}
        },
        room_id: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :room_id,
          tag: 2,
          type: :string
        },
        room_name: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :room_name,
          tag: 13,
          type: :string
        },
        segment_results: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :segment_results,
          tag: 17,
          type: {:message, LivekitProtocolEx.SegmentsInfo}
        },
        segments: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :result},
          label: :optional,
          name: :segments,
          tag: 12,
          type: {:message, LivekitProtocolEx.SegmentsInfo}
        },
        source_type: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :EGRESS_SOURCE_TYPE_WEB},
          label: :optional,
          name: :source_type,
          tag: 26,
          type: {:enum, LivekitProtocolEx.EgressSourceType}
        },
        started_at: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :started_at,
          tag: 10,
          type: :int64
        },
        status: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: :EGRESS_STARTING},
          label: :optional,
          name: :status,
          tag: 3,
          type: {:enum, LivekitProtocolEx.EgressStatus}
        },
        stream: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :result},
          label: :optional,
          name: :stream,
          tag: 7,
          type: {:message, LivekitProtocolEx.StreamInfoList}
        },
        stream_results: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: :unpacked,
          label: :repeated,
          name: :stream_results,
          tag: 15,
          type: {:message, LivekitProtocolEx.StreamInfo}
        },
        track: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :request},
          label: :optional,
          name: :track,
          tag: 6,
          type: {:message, LivekitProtocolEx.TrackEgressRequest}
        },
        track_composite: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :request},
          label: :optional,
          name: :track_composite,
          tag: 5,
          type: {:message, LivekitProtocolEx.TrackCompositeEgressRequest}
        },
        updated_at: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :updated_at,
          tag: 18,
          type: :int64
        },
        web: %{
          __struct__: Protox.Field,
          extender: nil,
          kind: %{__struct__: Protox.OneOf, parent: :request},
          label: :optional,
          name: :web,
          tag: 14,
          type: {:message, LivekitProtocolEx.WebEgressRequest}
        }
      },
      file_options: %{
        cc_enable_arenas: nil,
        cc_generic_services: nil,
        csharp_namespace: "LiveKit.Proto",
        deprecated: nil,
        features: nil,
        go_package: "github.com/livekit/protocol/livekit",
        java_generate_equals_and_hash: nil,
        java_generic_services: nil,
        java_multiple_files: nil,
        java_outer_classname: nil,
        java_package: nil,
        java_string_check_utf8: nil,
        objc_class_prefix: nil,
        optimize_for: nil,
        php_class_prefix: nil,
        php_metadata_namespace: nil,
        php_namespace: nil,
        py_generic_services: nil,
        ruby_package: "LiveKit::Proto",
        swift_prefix: nil,
        uninterpreted_option: []
      },
      name: LivekitProtocolEx.EgressInfo,
      syntax: :proto3
    }
  end
end
